{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Employee Management System\n\n## Overview\n\nThis is a full-stack Employee Management System built with React, TypeScript, Express.js, and PostgreSQL. The application provides comprehensive functionality for managing employees, tracking attendance, and handling leave requests with role-based access control. It features separate dashboards for employees and administrators, real-time attendance tracking, and a modern UI built with shadcn/ui components.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript using Vite as the build tool\n- **UI Library**: shadcn/ui components built on Radix UI primitives\n- **Styling**: Tailwind CSS with CSS custom properties for theming\n- **State Management**: TanStack React Query for server state and custom hooks for local state\n- **Routing**: Wouter for lightweight client-side routing\n- **Form Handling**: React Hook Form with Zod validation schemas\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **Database ORM**: Drizzle ORM for type-safe database operations\n- **Authentication**: JWT-based authentication with bcrypt for password hashing\n- **API Design**: RESTful API with role-based access control middleware\n- **File Structure**: Monorepo structure with shared schema definitions\n\n### Data Storage Solutions\n- **Database**: PostgreSQL with Neon serverless connection\n- **Schema Management**: Drizzle migrations with declarative schema definitions\n- **Connection Pooling**: Neon serverless pool for efficient database connections\n- **Data Models**: \n  - Employees with role-based permissions (employee/admin)\n  - Attendance tracking with check-in/check-out functionality\n  - Leave requests with approval workflow\n\n### Authentication and Authorization\n- **Strategy**: JWT tokens with 24-hour expiration\n- **Password Security**: bcrypt hashing with salt rounds\n- **Role-based Access**: Middleware functions for protecting admin-only routes\n- **Session Management**: Token-based authentication stored in localStorage\n- **Route Protection**: HOCs for protecting authenticated and role-specific routes\n\n### External Dependencies\n- **Database**: Neon PostgreSQL serverless database\n- **UI Components**: Radix UI primitives for accessible components\n- **Validation**: Zod for runtime type checking and form validation\n- **Date Handling**: date-fns for date manipulation and formatting\n- **Development**: Replit-specific plugins for development environment integration\n\nThe architecture follows a clean separation of concerns with shared TypeScript schemas between client and server, ensuring type safety across the full stack. The modular component structure and custom hooks promote code reusability and maintainability.","size_bytes":2849},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\", \"Inter\", \"-apple-system\", \"BlinkMacSystemFont\", \"system-ui\", \"sans-serif\"],\n        serif: [\"var(--font-serif)\", \"Georgia\", \"serif\"],\n        mono: [\"var(--font-mono)\", \"Menlo\", \"monospace\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2872},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { drizzle } from 'drizzle-orm/node-postgres';\nimport { Pool } from 'pg';\nimport * as schema from \"@shared/schema\";\nimport dotenv from \"dotenv\";\ndotenv.config();\n\nconsole.log(\"DATABASE_URL exists:\", !!process.env.DATABASE_URL);\nconsole.log(\"DATABASE_URL value:\", process.env.DATABASE_URL);\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ \n  connectionString: process.env.DATABASE_URL,\n  ssl: false\n});\n\nexport const db = drizzle(pool, { schema });","size_bytes":570},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport dotenv from \"dotenv\";\ndotenv.config();\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// Logging middleware\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  // Error handling middleware\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // Setup Vite only in development\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // Use the PORT from environment variables, default to 5000\n  const port = parseInt(process.env.PORT || \"5000\", 10);\n\n  // IMPORTANT: Use 0.0.0.0 for cloud deployments\n  server.listen(port, \"0.0.0.0\", () => {\n    log(`Serving on http://0.0.0.0:${port}`);\n  });\n})();\n","size_bytes":1863},"server/routes.ts":{"content":"import { response, type Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { \n  loginSchema, \n  insertEmployeeSchema, \n  insertAttendanceSchema, \n  insertLeaveRequestSchema,\n  updateLeaveStatusSchema\n} from \"@shared/schema\";\nimport { \n  generateToken, \n  hashPassword, \n  comparePassword, \n  authenticateToken, \n  requireRole,\n  type AuthRequest \n} from \"./middleware/auth\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Authentication routes\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { email, password } = loginSchema.parse(req.body);\n      \n      const employee = await storage.getEmployeeByEmail(email);\n      if (!employee) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      const isValidPassword = await comparePassword(password, employee.password);\n      if (!isValidPassword) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      const token = generateToken(employee);\n      const { password: _, ...employeeData } = employee;\n\n      res.json({ \n        token, \n        employee: employeeData \n      });\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid request data\" });\n    }\n  });\n\n  app.get(\"/api/auth/me\", authenticateToken, async (req: AuthRequest, res) => {\n    try {\n      const employee = await storage.getEmployee(req.user!.id);\n      if (!employee) {\n        return res.status(404).json({ message: \"Employee not found\" });\n      }\n\n      const { password: _, ...employeeData } = employee;\n      res.json(employeeData);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Employee routes\n  app.get(\"/api/employees\", authenticateToken, requireRole([\"admin\"]), async (req, res) => {\n    try {\n      const employees = await storage.getAllEmployees();\n      const employeesWithoutPasswords = employees.map(({ password, ...emp }) => emp);\n      res.json(employeesWithoutPasswords);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/employees\", authenticateToken, requireRole([\"admin\"]), async (req, res) => {\n    \n    try {\n      const employeeData = insertEmployeeSchema.parse(req.body);\n      const hashedPassword = await hashPassword(employeeData.password);\n      \n      const employee = await storage.createEmployee({\n        ...employeeData,\n        password: hashedPassword,\n      });\n\n      const { password: _, ...employeeResponse } = employee;\n      res.status(201).json(employeeResponse);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid employee data\" });\n    }\n  });\n\n  app.put(\"/api/employees/:id\", authenticateToken, requireRole([\"admin\"]), async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updateData = req.body;\n      \n      if (updateData.password) {\n        updateData.password = await hashPassword(updateData.password);\n      }\n\n      const employee = await storage.updateEmployee(id, updateData);\n      if (!employee) {\n        return res.status(404).json({ message: \"Employee not found\" });\n      }\n\n      const { password: _, ...employeeResponse } = employee;\n      res.json(employeeResponse);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid update data\" });\n    }\n  });\n\n  app.delete(\"/api/employees/:id\", authenticateToken, requireRole([\"admin\"]), async (req, res) => {\n    try {\n      const { id } = req.params;\n      const deleted = await storage.deleteEmployee(id);\n      \n      if (!deleted) {\n        return res.status(404).json({ message: \"Employee not found\" });\n      }\n\n      res.json({ message: \"Employee deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Attendance routes\n  app.post(\"/api/attendance/checkin\", authenticateToken, async (req: AuthRequest, res) => {\n    console.log(\"Hello\", authenticateToken)\n    try {\n      const employeeId = req.user!.id;\n      const today = new Date();\n      \n      // Check if already checked in today\n      const existingAttendance = await storage.getEmployeeAttendance(employeeId, today);\n      if (existingAttendance) {\n        return res.status(400).json({ message: \"Already checked in today\" });\n      }\n\n      const attendance = await storage.createAttendance({\n        employeeId,\n        date: today,\n        checkInTime: today,\n        status: \"present\",\n      });\n\n      res.status(201).json(attendance);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/attendance/checkout\", authenticateToken, async (req: AuthRequest, res) => {\n    try {\n      const employeeId = req.user!.id;\n      const today = new Date();\n      \n      const existingAttendance = await storage.getEmployeeAttendance(employeeId, today);\n      if (!existingAttendance) {\n        return res.status(400).json({ message: \"No check-in found for today\" });\n      }\n\n      if (existingAttendance.checkOutTime) {\n        return res.status(400).json({ message: \"Already checked out today\" });\n      }\n\n      const checkOutTime = new Date();\n      const hoursWorked = existingAttendance.checkInTime \n        ? Math.round((checkOutTime.getTime() - existingAttendance.checkInTime.getTime()) / (1000 * 60 * 60) * 10) / 10\n        : 0;\n\n      const updatedAttendance = await storage.updateAttendance(existingAttendance.id, {\n        checkOutTime,\n        hoursWorked,\n      });\n\n      res.json(updatedAttendance);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/attendance/today\", authenticateToken, requireRole([\"admin\"]), async (req, res) => {\n    try {\n      const todayAttendance = await storage.getTodayAttendance();\n      res.json(todayAttendance);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/attendance/my\", authenticateToken, async (req: AuthRequest, res) => {\n    try {\n      const employeeId = req.user!.id;\n      const today = new Date();\n      const attendance = await storage.getEmployeeAttendance(employeeId, today);\n      res.json(attendance || null);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Leave request routes\n  app.post(\"/api/leave-requests\", authenticateToken, async (req: AuthRequest, res) => {\n    try {\n      const leaveData = insertLeaveRequestSchema.parse({\n        ...req.body,\n        employeeId: req.user!.id,\n      });\n\n      // Calculate days requested\n      const startDate = new Date(leaveData.startDate);\n      const endDate = new Date(leaveData.endDate);\n      const daysRequested = Math.ceil((endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24)) + 1;\n\n      const leaveRequest = await storage.createLeaveRequest({\n        ...leaveData,\n        daysRequested,\n      });\n\n      res.status(201).json(leaveRequest);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid leave request data\" });\n    }\n  });\n\n  app.get(\"/api/leave-requests/my\", authenticateToken, async (req: AuthRequest, res) => {\n    try {\n      const employeeId = req.user!.id;\n      const leaveRequests = await storage.getEmployeeLeaveRequests(employeeId);\n      res.json(leaveRequests);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/leave-requests/pending\", authenticateToken, requireRole([\"admin\"]), async (req, res) => {\n    try {\n      const pendingRequests = await storage.getPendingLeaveRequests();\n      res.json(pendingRequests);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.put(\"/api/leave-requests/:id/status\", authenticateToken, requireRole([\"admin\"]), async (req: AuthRequest, res) => {\n    try {\n      const { id } = req.params;\n      const statusUpdate = updateLeaveStatusSchema.parse(req.body);\n      \n      const updatedRequest = await storage.updateLeaveRequestStatus(id, {\n        ...statusUpdate,\n        reviewedBy: req.user!.id,\n      });\n\n      if (!updatedRequest) {\n        return res.status(404).json({ message: \"Leave request not found\" });\n      }\n\n      res.json(updatedRequest);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid status update data\" });\n    }\n  });\n\n  // Dashboard routes\n  app.get(\"/api/dashboard/stats\", authenticateToken, requireRole([\"admin\"]), async (req, res) => {\n    try {\n      const stats = await storage.getDashboardStats();\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":8871},"server/storage.ts":{"content":"import { \n  employees, \n  attendance, \n  leaveRequests,\n  type Employee, \n  type InsertEmployee,\n  type Attendance,\n  type InsertAttendance,\n  type LeaveRequest,\n  type InsertLeaveRequest,\n  type UpdateLeaveStatus\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, desc, sql, gte, lte, count } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // Employee operations\n  getEmployee(id: string): Promise<Employee | undefined>;\n  getEmployeeByEmail(email: string): Promise<Employee | undefined>;\n  createEmployee(employee: InsertEmployee): Promise<Employee>;\n  updateEmployee(id: string, employee: Partial<InsertEmployee>): Promise<Employee | undefined>;\n  deleteEmployee(id: string): Promise<boolean>;\n  getAllEmployees(): Promise<Employee[]>;\n  \n  // Attendance operations\n  createAttendance(attendance: InsertAttendance): Promise<Attendance>;\n  getEmployeeAttendance(employeeId: string, date?: Date): Promise<Attendance | undefined>;\n  getTodayAttendance(): Promise<(Attendance & { employee: Employee })[]>;\n  updateAttendance(id: string, updates: Partial<Attendance>): Promise<Attendance | undefined>;\n  \n  // Leave request operations\n  createLeaveRequest(leaveRequest: InsertLeaveRequest): Promise<LeaveRequest>;\n  getEmployeeLeaveRequests(employeeId: string): Promise<LeaveRequest[]>;\n  getPendingLeaveRequests(): Promise<(LeaveRequest & { employee: Employee })[]>;\n  updateLeaveRequestStatus(id: string, updates: UpdateLeaveStatus & { reviewedBy: string }): Promise<LeaveRequest | undefined>;\n  \n  // Dashboard statistics\n  getDashboardStats(): Promise<{\n    totalEmployees: number;\n    presentToday: number;\n    pendingLeaves: number;\n    departments: number;\n  }>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getEmployee(id: string): Promise<Employee | undefined> {\n    const [employee] = await db.select().from(employees).where(eq(employees.id, id));\n    return employee || undefined;\n  }\n\n  async getEmployeeByEmail(email: string): Promise<Employee | undefined> {\n    const [employee] = await db.select().from(employees).where(eq(employees.email, email));\n    return employee || undefined;\n  }\n\n  async createEmployee(employee: InsertEmployee): Promise<Employee> {\n    const [newEmployee] = await db\n      .insert(employees)\n      .values({\n        ...employee,\n        updatedAt: new Date(),\n      })\n      .returning();\n    return newEmployee;\n  }\n\n  async updateEmployee(id: string, employee: Partial<InsertEmployee>): Promise<Employee | undefined> {\n    const [updatedEmployee] = await db\n      .update(employees)\n      .set({\n        ...employee,\n        updatedAt: new Date(),\n      })\n      .where(eq(employees.id, id))\n      .returning();\n    return updatedEmployee || undefined;\n  }\n\n  async deleteEmployee(id: string): Promise<boolean> {\n    const result = await db.delete(employees).where(eq(employees.id, id));\n    return result.rowCount > 0;\n  }\n\n  async getAllEmployees(): Promise<Employee[]> {\n    return await db.select().from(employees).where(eq(employees.isActive, true));\n  }\n\n  async createAttendance(attendanceData: InsertAttendance): Promise<Attendance> {\n    const [newAttendance] = await db\n      .insert(attendance)\n      .values(attendanceData)\n      .returning();\n    return newAttendance;\n  }\n\n  async getEmployeeAttendance(employeeId: string, date?: Date): Promise<Attendance | undefined> {\n    const targetDate = date || new Date();\n    const startOfDay = new Date(targetDate);\n    startOfDay.setHours(0, 0, 0, 0);\n    const endOfDay = new Date(targetDate);\n    endOfDay.setHours(23, 59, 59, 999);\n\n    const [attendanceRecord] = await db\n      .select()\n      .from(attendance)\n      .where(\n        and(\n          eq(attendance.employeeId, employeeId),\n          gte(attendance.date, startOfDay),\n          lte(attendance.date, endOfDay)\n        )\n      );\n    return attendanceRecord || undefined;\n  }\n\n  async getTodayAttendance(): Promise<(Attendance & { employee: Employee })[]> {\n    const today = new Date();\n    const startOfDay = new Date(today);\n    startOfDay.setHours(0, 0, 0, 0);\n    const endOfDay = new Date(today);\n    endOfDay.setHours(23, 59, 59, 999);\n\n    return await db\n      .select({\n        id: attendance.id,\n        employeeId: attendance.employeeId,\n        date: attendance.date,\n        checkInTime: attendance.checkInTime,\n        checkOutTime: attendance.checkOutTime,\n        hoursWorked: attendance.hoursWorked,\n        status: attendance.status,\n        createdAt: attendance.createdAt,\n        employee: employees,\n      })\n      .from(attendance)\n      .innerJoin(employees, eq(attendance.employeeId, employees.id))\n      .where(\n        and(\n          gte(attendance.date, startOfDay),\n          lte(attendance.date, endOfDay)\n        )\n      );\n  }\n\n  async updateAttendance(id: string, updates: Partial<Attendance>): Promise<Attendance | undefined> {\n    const [updatedAttendance] = await db\n      .update(attendance)\n      .set(updates)\n      .where(eq(attendance.id, id))\n      .returning();\n    return updatedAttendance || undefined;\n  }\n\n  async createLeaveRequest(leaveRequest: InsertLeaveRequest): Promise<LeaveRequest> {\n    const [newLeaveRequest] = await db\n      .insert(leaveRequests)\n      .values({\n        ...leaveRequest,\n        updatedAt: new Date(),\n      })\n      .returning();\n    return newLeaveRequest;\n  }\n\n  async getEmployeeLeaveRequests(employeeId: string): Promise<LeaveRequest[]> {\n    return await db\n      .select()\n      .from(leaveRequests)\n      .where(eq(leaveRequests.employeeId, employeeId))\n      .orderBy(desc(leaveRequests.createdAt));\n  }\n\n  async getPendingLeaveRequests(): Promise<(LeaveRequest & { employee: Employee })[]> {\n    return await db\n      .select({\n        id: leaveRequests.id,\n        employeeId: leaveRequests.employeeId,\n        leaveType: leaveRequests.leaveType,\n        startDate: leaveRequests.startDate,\n        endDate: leaveRequests.endDate,\n        reason: leaveRequests.reason,\n        status: leaveRequests.status,\n        reviewedBy: leaveRequests.reviewedBy,\n        reviewedAt: leaveRequests.reviewedAt,\n        reviewComments: leaveRequests.reviewComments,\n        daysRequested: leaveRequests.daysRequested,\n        createdAt: leaveRequests.createdAt,\n        updatedAt: leaveRequests.updatedAt,\n        employee: employees,\n      })\n      .from(leaveRequests)\n      .innerJoin(employees, eq(leaveRequests.employeeId, employees.id))\n      .where(eq(leaveRequests.status, \"pending\"))\n      .orderBy(desc(leaveRequests.createdAt));\n  }\n\n  async updateLeaveRequestStatus(id: string, updates: UpdateLeaveStatus & { reviewedBy: string }): Promise<LeaveRequest | undefined> {\n    const [updatedLeaveRequest] = await db\n      .update(leaveRequests)\n      .set({\n        ...updates,\n        reviewedAt: new Date(),\n        updatedAt: new Date(),\n      })\n      .where(eq(leaveRequests.id, id))\n      .returning();\n    return updatedLeaveRequest || undefined;\n  }\n\n  async getDashboardStats(): Promise<{\n    totalEmployees: number;\n    presentToday: number;\n    pendingLeaves: number;\n    departments: number;\n  }> {\n    const today = new Date();\n    const startOfDay = new Date(today);\n    startOfDay.setHours(0, 0, 0, 0);\n    const endOfDay = new Date(today);\n    endOfDay.setHours(23, 59, 59, 999);\n\n    const [totalEmployeesResult] = await db\n      .select({ count: count() })\n      .from(employees)\n      .where(eq(employees.isActive, true));\n\n    const [presentTodayResult] = await db\n      .select({ count: count() })\n      .from(attendance)\n      .where(\n        and(\n          gte(attendance.date, startOfDay),\n          lte(attendance.date, endOfDay),\n          eq(attendance.status, \"present\")\n        )\n      );\n\n    const [pendingLeavesResult] = await db\n      .select({ count: count() })\n      .from(leaveRequests)\n      .where(eq(leaveRequests.status, \"pending\"));\n\n    const departmentsResult = await db\n      .selectDistinct({ department: employees.department })\n      .from(employees)\n      .where(eq(employees.isActive, true));\n\n    return {\n      totalEmployees: totalEmployeesResult.count,\n      presentToday: presentTodayResult.count,\n      pendingLeaves: pendingLeavesResult.count,\n      departments: departmentsResult.length,\n    };\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":8292},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql, relations } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, integer, boolean, pgEnum } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const roleEnum = pgEnum(\"role\", [\"employee\", \"admin\"]);\nexport const leaveStatusEnum = pgEnum(\"leave_status\", [\"pending\", \"approved\", \"rejected\"]);\nexport const leaveTypeEnum = pgEnum(\"leave_type\", [\"sick\", \"vacation\", \"personal\", \"emergency\"]);\n\nexport const employees = pgTable(\"employees\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  firstName: text(\"first_name\").notNull(),\n  lastName: text(\"last_name\").notNull(),\n  department: text(\"department\").notNull(),\n  position: text(\"position\").notNull(),\n  role: roleEnum(\"role\").default(\"employee\").notNull(),\n  leaveBalance: integer(\"leave_balance\").default(20).notNull(),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const attendance = pgTable(\"attendance\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  employeeId: varchar(\"employee_id\").references(() => employees.id, { onDelete: \"cascade\" }).notNull(),\n  date: timestamp(\"date\").defaultNow().notNull(),\n  checkInTime: timestamp(\"check_in_time\"),\n  checkOutTime: timestamp(\"check_out_time\"),\n  hoursWorked: integer(\"hours_worked\").default(0),\n  status: text(\"status\").default(\"present\").notNull(), // present, absent, on_break\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const leaveRequests = pgTable(\"leave_requests\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  employeeId: varchar(\"employee_id\").references(() => employees.id, { onDelete: \"cascade\" }).notNull(),\n  leaveType: leaveTypeEnum(\"leave_type\").notNull(),\n  startDate: timestamp(\"start_date\").notNull(),\n  endDate: timestamp(\"end_date\").notNull(),\n  reason: text(\"reason\"),\n  status: leaveStatusEnum(\"status\").default(\"pending\").notNull(),\n  reviewedBy: varchar(\"reviewed_by\").references(() => employees.id),\n  reviewedAt: timestamp(\"reviewed_at\"),\n  reviewComments: text(\"review_comments\"),\n  daysRequested: integer(\"days_requested\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Relations\nexport const employeesRelations = relations(employees, ({ many, one }) => ({\n  attendance: many(attendance),\n  leaveRequests: many(leaveRequests),\n  reviewedLeaves: many(leaveRequests, { relationName: \"reviewer\" }),\n}));\n\nexport const attendanceRelations = relations(attendance, ({ one }) => ({\n  employee: one(employees, {\n    fields: [attendance.employeeId],\n    references: [employees.id],\n  }),\n}));\n\nexport const leaveRequestsRelations = relations(leaveRequests, ({ one }) => ({\n  employee: one(employees, {\n    fields: [leaveRequests.employeeId],\n    references: [employees.id],\n  }),\n  reviewer: one(employees, {\n    fields: [leaveRequests.reviewedBy],\n    references: [employees.id],\n    relationName: \"reviewer\",\n  }),\n}));\n\n// Insert schemas\nexport const insertEmployeeSchema = createInsertSchema(employees).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertAttendanceSchema = createInsertSchema(attendance).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertLeaveRequestSchema = createInsertSchema(leaveRequests).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  reviewedBy: true,\n  reviewedAt: true,\n  reviewComments: true,\n});\n\nexport const loginSchema = z.object({\n  email: z.string().email(\"Invalid email address\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n});\n\nexport const updateLeaveStatusSchema = z.object({\n  status: z.enum([\"approved\", \"rejected\"]),\n  reviewComments: z.string().optional(),\n});\n\n// Types\nexport type Employee = typeof employees.$inferSelect;\nexport type InsertEmployee = z.infer<typeof insertEmployeeSchema>;\nexport type Attendance = typeof attendance.$inferSelect;\nexport type InsertAttendance = z.infer<typeof insertAttendanceSchema>;\nexport type LeaveRequest = typeof leaveRequests.$inferSelect;\nexport type InsertLeaveRequest = z.infer<typeof insertLeaveRequestSchema>;\nexport type LoginCredentials = z.infer<typeof loginSchema>;\nexport type UpdateLeaveStatus = z.infer<typeof updateLeaveStatusSchema>;\n","size_bytes":4541},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport Navigation from \"@/components/navigation\";\nimport Login from \"@/pages/login\";\nimport EmployeeDashboard from \"@/pages/employee-dashboard\";\nimport AdminDashboard from \"@/pages/admin-dashboard\";\nimport AdminEmployees from \"@/pages/admin-employees\";\nimport AdminLeaveRequests from \"@/pages/admin-leave-requests\";\nimport AdminReports from \"@/pages/admin-reports\";\nimport AdminSettings from \"@/pages/admin-settings\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction ProtectedRoute({ children, allowedRoles }: { children: React.ReactNode; allowedRoles?: string[] }) {\n  const { user, isAuthenticated, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-muted-foreground\">Loading...</div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated || !user) {\n    return <Login />;\n  }\n\n  if (allowedRoles && !allowedRoles.includes(user.role)) {\n    return <NotFound />;\n  }\n\n  return <>{children}</>;\n}\n\nfunction Router() {\n  const { isAuthenticated, user } = useAuth();\n\n  return (\n    <>\n      <Navigation />\n      <Switch>\n        <Route path=\"/\">\n          {isAuthenticated && user ? (\n            user.role === \"admin\" ? <AdminDashboard /> : <EmployeeDashboard />\n          ) : (\n            <Login />\n          )}\n        </Route>\n        \n        <Route path=\"/dashboard\">\n          <ProtectedRoute allowedRoles={[\"employee\"]}>\n            <EmployeeDashboard />\n          </ProtectedRoute>\n        </Route>\n        \n        <Route path=\"/admin\">\n          <ProtectedRoute allowedRoles={[\"admin\"]}>\n            <AdminDashboard />\n          </ProtectedRoute>\n        </Route>\n        \n        <Route path=\"/admin/employees\">\n          <ProtectedRoute allowedRoles={[\"admin\"]}>\n            <AdminEmployees />\n          </ProtectedRoute>\n        </Route>\n        \n        <Route path=\"/admin/leave-requests\">\n          <ProtectedRoute allowedRoles={[\"admin\"]}>\n            <AdminLeaveRequests />\n          </ProtectedRoute>\n        </Route>\n        \n        <Route path=\"/admin/reports\">\n          <ProtectedRoute allowedRoles={[\"admin\"]}>\n            <AdminReports />\n          </ProtectedRoute>\n        </Route>\n        \n        <Route path=\"/admin/settings\">\n          <ProtectedRoute allowedRoles={[\"admin\"]}>\n            <AdminSettings />\n          </ProtectedRoute>\n        </Route>\n        \n        {/* Fallback to 404 */}\n        <Route component={NotFound} />\n      </Switch>\n    </>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3023},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(222, 84%, 5%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222, 84%, 5%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222, 84%, 5%);\n  --primary: hsl(221, 83%, 53%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(210, 40%, 96%);\n  --secondary-foreground: hsl(222, 84%, 5%);\n  --muted: hsl(210, 40%, 89%);\n  --muted-foreground: hsl(215, 16%, 47%);\n  --accent: hsl(142, 76%, 36%);\n  --accent-foreground: hsl(355, 7%, 97%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(214, 32%, 91%);\n  --input: hsl(214, 32%, 91%);\n  --ring: hsl(221, 83%, 53%);\n  --chart-1: hsl(221, 83%, 53%);\n  --chart-2: hsl(142, 76%, 36%);\n  --chart-3: hsl(42, 93%, 56%);\n  --chart-4: hsl(147, 79%, 42%);\n  --chart-5: hsl(341, 75%, 51%);\n  --sidebar: hsl(180, 6.6667%, 97.0588%);\n  --sidebar-foreground: hsl(210, 25%, 7.8431%);\n  --sidebar-primary: hsl(221, 83%, 53%);\n  --sidebar-primary-foreground: hsl(210, 40%, 98%);\n  --sidebar-accent: hsl(210, 40%, 96%);\n  --sidebar-accent-foreground: hsl(221, 83%, 53%);\n  --sidebar-border: hsl(214, 32%, 91%);\n  --sidebar-ring: hsl(221, 83%, 53%);\n  --font-sans: 'Inter', -apple-system, BlinkMacSystemFont, system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 8px;\n}\n\n.dark {\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(200, 6.6667%, 91.1765%);\n  --card: hsl(228, 9.8039%, 10%);\n  --card-foreground: hsl(0, 0%, 85.0980%);\n  --popover: hsl(0, 0%, 0%);\n  --popover-foreground: hsl(200, 6.6667%, 91.1765%);\n  --primary: hsl(221, 83%, 53%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(195, 15.3846%, 94.9020%);\n  --secondary-foreground: hsl(210, 25%, 7.8431%);\n  --muted: hsl(0, 0%, 9.4118%);\n  --muted-foreground: hsl(210, 3.3898%, 46.2745%);\n  --accent: hsl(142, 76%, 36%);\n  --accent-foreground: hsl(355, 7%, 97%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(210, 5.2632%, 14.9020%);\n  --input: hsl(207.6923, 27.6596%, 18.4314%);\n  --ring: hsl(221, 83%, 53%);\n  --chart-1: hsl(221, 83%, 53%);\n  --chart-2: hsl(142, 76%, 36%);\n  --chart-3: hsl(42, 93%, 56%);\n  --chart-4: hsl(147, 79%, 42%);\n  --chart-5: hsl(341, 75%, 51%);\n  --sidebar: hsl(228, 9.8039%, 10%);\n  --sidebar-foreground: hsl(0, 0%, 85.0980%);\n  --sidebar-primary: hsl(221, 83%, 53%);\n  --sidebar-primary-foreground: hsl(210, 40%, 98%);\n  --sidebar-accent: hsl(210, 5.2632%, 14.9020%);\n  --sidebar-accent-foreground: hsl(221, 83%, 53%);\n  --sidebar-border: hsl(210, 5.2632%, 14.9020%);\n  --sidebar-ring: hsl(221, 83%, 53%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/* Custom status badge styles */\n.status-pending {\n  @apply bg-yellow-100 text-yellow-800 hover:bg-yellow-100;\n}\n\n.status-approved {\n  @apply bg-green-100 text-green-800 hover:bg-green-100;\n}\n\n.status-rejected {\n  @apply bg-red-100 text-red-800 hover:bg-red-100;\n}\n\n.status-present {\n  @apply bg-blue-100 text-blue-800 hover:bg-blue-100;\n}\n","size_bytes":3317},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/middleware/auth.ts":{"content":"import jwt from \"jsonwebtoken\";\nimport bcrypt from \"bcrypt\";\nimport type { Request, Response, NextFunction } from \"express\";\nimport type { Employee } from \"@shared/schema\";\n\nconst JWT_SECRET = process.env.JWT_SECRET || \"ba6dafbf1b1941cfa1f0d84a6d3070d1\";\n\nexport interface AuthRequest extends Request {\n  user?: Employee;\n}\n\n// 🔑 Generate JWT for a user\nexport function generateToken(employee: Employee): string {\n  return jwt.sign(\n    {\n      id: employee.id,\n      email: employee.email,\n      role: employee.role,\n    },\n    JWT_SECRET,\n    { expiresIn: \"24h\" }\n  );\n}\n\n// 🔒 Password hashing\nexport async function hashPassword(password: string): Promise<string> {\n  return await bcrypt.hash(password, 10);\n}\n\nexport async function comparePassword(\n  password: string,\n  hash: string\n): Promise<boolean> {\n  return await bcrypt.compare(password, hash);\n}\n\n// 🛡️ Verify JWT middleware\nexport function authenticateToken(\n  req: AuthRequest,\n  res: Response,\n  next: NextFunction\n) {\n  const authHeader = req.headers[\"authorization\"];\n  const token = authHeader?.startsWith(\"Bearer \")\n    ? authHeader.split(\" \")[1]\n    : null;\n\n  if (!token) {\n    return res.status(401).json({\n      message:\n        \"Access token required in Authorization header as 'Bearer <token>'\",\n    });\n  }\n\n  try {\n    const decoded = jwt.verify(token, JWT_SECRET) as Employee;\n    req.user = decoded;\n    next();\n  } catch (err) {\n    return res.status(403).json({ message: \"Invalid or expired token\" });\n  }\n}\n\n// 👮 Role-based guard\nexport function requireRole(roles: string[]) {\n  return (req: AuthRequest, res: Response, next: NextFunction) => {\n    if (!req.user) {\n      return res.status(401).json({ message: \"Authentication required\" });\n    }\n\n    if (!roles.includes(req.user.role)) {\n      return res.status(403).json({ message: \"Insufficient permissions\" });\n    }\n\n    next();\n  };\n}\n","size_bytes":1888},"client/src/components/employee-form.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport type { Employee } from \"@shared/schema\";\n\nconst employeeFormSchema = z.object({\n  email: z.string().email(\"Invalid email address\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\").optional(),\n  firstName: z.string().min(1, \"First name is required\"),\n  lastName: z.string().min(1, \"Last name is required\"),\n  department: z.string().min(1, \"Department is required\"),\n  position: z.string().min(1, \"Position is required\"),\n  role: z.enum([\"employee\", \"admin\"]),\n  leaveBalance: z.number().min(0, \"Leave balance must be positive\"),\n});\n\ntype EmployeeFormData = z.infer<typeof employeeFormSchema>;\n\ninterface EmployeeFormProps {\n  employee?: Employee;\n  onSubmit: (data: EmployeeFormData) => void;\n  onCancel: () => void;\n  isLoading?: boolean;\n}\n\nexport default function EmployeeForm({ employee, onSubmit, onCancel, isLoading }: EmployeeFormProps) {\n  const form = useForm<EmployeeFormData>({\n    resolver: zodResolver(employeeFormSchema),\n    defaultValues: {\n      email: employee?.email || \"\",\n      password: \"\",\n      firstName: employee?.firstName || \"\",\n      lastName: employee?.lastName || \"\",\n      department: employee?.department || \"\",\n      position: employee?.position || \"\",\n      role: employee?.role || \"employee\",\n      leaveBalance: employee?.leaveBalance || 20,\n    },\n  });\n\n  const handleSubmit = (data: EmployeeFormData) => {\n    // Remove password field if it's empty (for updates)\n    if (!data.password) {\n      const { password, ...dataWithoutPassword } = data;\n      onSubmit(dataWithoutPassword as EmployeeFormData);\n    } else {\n      onSubmit(data);\n    }\n  };\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n        <div className=\"grid grid-cols-2 gap-4\">\n          <FormField\n            control={form.control}\n            name=\"firstName\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>First Name</FormLabel>\n                <FormControl>\n                  <Input {...field} data-testid=\"input-first-name\" />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n          \n          <FormField\n            control={form.control}\n            name=\"lastName\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Last Name</FormLabel>\n                <FormControl>\n                  <Input {...field} data-testid=\"input-last-name\" />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n        \n        <FormField\n          control={form.control}\n          name=\"email\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Email</FormLabel>\n              <FormControl>\n                <Input type=\"email\" {...field} data-testid=\"input-email\" />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        \n        <FormField\n          control={form.control}\n          name=\"password\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>{employee ? \"New Password (optional)\" : \"Password\"}</FormLabel>\n              <FormControl>\n                <Input \n                  type=\"password\" \n                  {...field} \n                  placeholder={employee ? \"Leave empty to keep current password\" : \"\"}\n                  data-testid=\"input-password\"\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        \n        <div className=\"grid grid-cols-2 gap-4\">\n          <FormField\n            control={form.control}\n            name=\"department\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Department</FormLabel>\n                <FormControl>\n                  <Input {...field} data-testid=\"input-department\" />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n          \n          <FormField\n            control={form.control}\n            name=\"position\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Position</FormLabel>\n                <FormControl>\n                  <Input {...field} data-testid=\"input-position\" />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n        \n        <div className=\"grid grid-cols-2 gap-4\">\n          <FormField\n            control={form.control}\n            name=\"role\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Role</FormLabel>\n                <Select onValueChange={field.onChange} defaultValue={field.value}>\n                  <FormControl>\n                    <SelectTrigger data-testid=\"select-role\">\n                      <SelectValue />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent>\n                    <SelectItem value=\"employee\">Employee</SelectItem>\n                    <SelectItem value=\"admin\">Admin</SelectItem>\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n          \n          <FormField\n            control={form.control}\n            name=\"leaveBalance\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Leave Balance</FormLabel>\n                <FormControl>\n                  <Input \n                    type=\"number\" \n                    {...field}\n                    onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                    data-testid=\"input-leave-balance\"\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n        \n        <div className=\"flex space-x-2 pt-4\">\n          <Button \n            type=\"submit\" \n            disabled={isLoading}\n            data-testid=\"button-save-employee\"\n          >\n            {isLoading ? \"Saving...\" : employee ? \"Update\" : \"Create\"}\n          </Button>\n          <Button \n            type=\"button\" \n            variant=\"outline\" \n            onClick={onCancel}\n            data-testid=\"button-cancel\"\n          >\n            Cancel\n          </Button>\n        </div>\n      </form>\n    </Form>\n  );\n}\n","size_bytes":6976},"client/src/components/leave-request-form.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { getAuthHeaders } from \"@/lib/auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst leaveRequestSchema = z.object({\n  leaveType: z.enum([\"sick\", \"vacation\", \"personal\", \"emergency\"]),\n  startDate: z.string().min(1, \"Start date is required\"),\n  endDate: z.string().min(1, \"End date is required\"),\n  reason: z.string().optional(),\n}).refine((data) => {\n  const start = new Date(data.startDate);\n  const end = new Date(data.endDate);\n  return end >= start;\n}, {\n  message: \"End date must be after or equal to start date\",\n  path: [\"endDate\"],\n});\n\ntype LeaveRequestFormData = z.infer<typeof leaveRequestSchema>;\n\nexport default function LeaveRequestForm() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<LeaveRequestFormData>({\n    resolver: zodResolver(leaveRequestSchema),\n    defaultValues: {\n      leaveType: \"vacation\",\n      startDate: \"\",\n      endDate: \"\",\n      reason: \"\",\n    },\n  });\n\n  const createLeaveRequestMutation = useMutation({\n    mutationFn: async (data: LeaveRequestFormData) => {\n      const response = await apiRequest(\"POST\", \"/api/leave-requests\", {\n        ...data,\n        startDate: new Date(data.startDate),\n        endDate: new Date(data.endDate),\n      });\n      return await response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Leave request submitted successfully\",\n      });\n      form.reset();\n      queryClient.invalidateQueries({ queryKey: [\"/api/leave-requests/my\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to submit leave request\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: LeaveRequestFormData) => {\n    createLeaveRequestMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"bg-card rounded-lg border border-border p-6\">\n      <h3 className=\"text-lg font-semibold mb-4\">Apply for Leave</h3>\n      <Form {...form}>\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n          <FormField\n            control={form.control}\n            name=\"leaveType\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Leave Type</FormLabel>\n                <Select onValueChange={field.onChange} defaultValue={field.value}>\n                  <FormControl>\n                    <SelectTrigger data-testid=\"select-leave-type\">\n                      <SelectValue placeholder=\"Select leave type\" />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent>\n                    <SelectItem value=\"sick\">Sick Leave</SelectItem>\n                    <SelectItem value=\"vacation\">Vacation</SelectItem>\n                    <SelectItem value=\"personal\">Personal</SelectItem>\n                    <SelectItem value=\"emergency\">Emergency</SelectItem>\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n          \n          <div className=\"grid grid-cols-2 gap-3\">\n            <FormField\n              control={form.control}\n              name=\"startDate\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Start Date</FormLabel>\n                  <FormControl>\n                    <Input \n                      type=\"date\" \n                      {...field}\n                      data-testid=\"input-start-date\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <FormField\n              control={form.control}\n              name=\"endDate\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>End Date</FormLabel>\n                  <FormControl>\n                    <Input \n                      type=\"date\" \n                      {...field}\n                      data-testid=\"input-end-date\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          </div>\n          \n          <FormField\n            control={form.control}\n            name=\"reason\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Reason (Optional)</FormLabel>\n                <FormControl>\n                  <Textarea \n                    placeholder=\"Reason for leave...\"\n                    {...field}\n                    data-testid=\"textarea-reason\"\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n          \n          <Button \n            type=\"submit\" \n            className=\"w-full\" \n            disabled={createLeaveRequestMutation.isPending}\n            data-testid=\"button-submit-leave\"\n          >\n            {createLeaveRequestMutation.isPending ? \"Submitting...\" : \"Submit Request\"}\n          </Button>\n        </form>\n      </Form>\n    </div>\n  );\n}\n","size_bytes":5769},"client/src/components/metric-card.tsx":{"content":"import { LucideIcon } from \"lucide-react\";\n\ninterface MetricCardProps {\n  title: string;\n  value: string | number;\n  icon: LucideIcon;\n  iconColor?: string;\n  valueColor?: string;\n}\n\nexport default function MetricCard({ \n  title, \n  value, \n  icon: Icon, \n  iconColor = \"text-primary\",\n  valueColor = \"\"\n}: MetricCardProps) {\n  return (\n    <div className=\"bg-card rounded-lg p-6 border border-border shadow-sm hover:shadow-md transition-shadow\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <p className=\"text-sm font-medium text-muted-foreground\">{title}</p>\n          <p className={`text-2xl font-bold ${valueColor}`} data-testid={`metric-${title.toLowerCase().replace(/\\s+/g, '-')}`}>\n            {value}\n          </p>\n        </div>\n        <div className={`h-12 w-12 bg-${iconColor.split('-')[1]}/10 rounded-full flex items-center justify-center`}>\n          <Icon className={`h-6 w-6 ${iconColor}`} />\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":993},"client/src/components/navigation.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Users } from \"lucide-react\";\n\nexport default function Navigation() {\n  const { user, logout } = useAuth();\n  const [location] = useLocation();\n\n  if (location === \"/\") return null;\n\n  return (\n    <nav className=\"bg-card border-b border-border sticky top-0 z-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between h-16\">\n          <div className=\"flex items-center\">\n            <Link href={user?.role === \"admin\" ? \"/admin\" : \"/dashboard\"}>\n              <div className=\"flex items-center space-x-2 cursor-pointer\">\n                <Users className=\"text-primary text-2xl\" />\n                <span className=\"font-bold text-xl\">EmpMS</span>\n              </div>\n            </Link>\n          </div>\n          <div className=\"flex items-center space-x-4\">\n            {user && (\n              <>\n                <span className=\"text-sm font-medium\">\n                  {user.firstName} {user.lastName}\n                </span>\n                <Button \n                  variant=\"ghost\" \n                  size=\"sm\" \n                  onClick={logout}\n                  data-testid=\"button-logout\"\n                >\n                  Logout\n                </Button>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":1465},"client/src/components/sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { cn } from \"@/lib/utils\";\nimport { \n  Home, \n  Clock, \n  Calendar, \n  User, \n  Users, \n  CalendarCheck, \n  BarChart3, \n  Settings,\n  ShieldQuestion,\n  LogOut\n} from \"lucide-react\";\nimport { useAuth } from \"@/hooks/use-auth\";\n\ninterface SidebarProps {\n  className?: string;\n}\n\nexport default function Sidebar({ className }: SidebarProps) {\n  const [location] = useLocation();\n  const { user, logout } = useAuth();\n\n  const employeeNavItems = [\n    { href: \"/dashboard\", icon: Home, label: \"Dashboard\", active: location === \"/dashboard\" },\n    { href: \"/attendance\", icon: Clock, label: \"Attendance\", active: location === \"/attendance\" },\n    { href: \"/leaves\", icon: Calendar, label: \"Leave Requests\", active: location === \"/leaves\" },\n    { href: \"/profile\", icon: User, label: \"Profile\", active: location === \"/profile\" },\n  ];\n\n  const adminNavItems = [\n    { href: \"/admin\", icon: BarChart3, label: \"Dashboard\", active: location === \"/admin\" },\n    { href: \"/admin/employees\", icon: Users, label: \"Employees\", active: location === \"/admin/employees\" },\n    { href: \"/admin/leave-requests\", icon: CalendarCheck, label: \"Leave Requests\", active: location === \"/admin/leave-requests\" },\n    { href: \"/admin/reports\", icon: BarChart3, label: \"Reports\", active: location === \"/admin/reports\" },\n    { href: \"/admin/settings\", icon: Settings, label: \"Settings\", active: location === \"/admin/settings\" },\n  ];\n\n  const navItems = user?.role === \"admin\" ? adminNavItems : employeeNavItems;\n\n  return (\n    <div className={cn(\"hidden lg:flex lg:flex-shrink-0\", className)}>\n      <div className=\"flex flex-col w-64\">\n        <div className=\"flex flex-col flex-grow bg-card border-r border-border pt-5 pb-4\">\n          <div className=\"flex items-center flex-shrink-0 px-4\">\n            <div className=\"flex items-center space-x-2\">\n              {user?.role === \"admin\" ? (\n                <ShieldQuestion className=\"text-primary text-2xl\" />\n              ) : (\n                <User className=\"text-primary text-2xl\" />\n              )}\n              <div>\n                <p className=\"text-sm font-medium\" data-testid=\"text-username\">\n                  {user?.firstName} {user?.lastName}\n                </p>\n                <p className=\"text-xs text-muted-foreground capitalize\">\n                  {user?.role}\n                </p>\n              </div>\n            </div>\n          </div>\n          <div className=\"mt-8 flex-grow flex flex-col\">\n            <nav className=\"flex-1 px-2 space-y-1\">\n              {navItems.map((item) => (\n                <Link key={item.href} href={item.href}>\n                  <div\n                    className={cn(\n                      \"flex items-center px-3 py-2 text-sm font-medium rounded-md transition-colors cursor-pointer\",\n                      item.active\n                        ? \"bg-primary text-primary-foreground\"\n                        : \"hover:bg-accent hover:text-accent-foreground\"\n                    )}\n                    data-testid={`link-${item.label.toLowerCase().replace(/\\s+/g, '-')}`}\n                  >\n                    <item.icon className=\"mr-3 h-5 w-5\" />\n                    {item.label}\n                  </div>\n                </Link>\n              ))}\n            </nav>\n          </div>\n          <div className=\"flex-shrink-0 px-2\">\n            <button\n              onClick={logout}\n              className=\"flex items-center w-full px-3 py-2 text-sm font-medium rounded-md text-destructive hover:bg-destructive/10 transition-colors\"\n              data-testid=\"button-sidebar-logout\"\n            >\n              <LogOut className=\"mr-3 h-5 w-5\" />\n              Logout\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3787},"client/src/hooks/use-auth.ts":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { getAuthToken, setAuthToken, removeAuthToken, getAuthHeaders } from \"@/lib/auth\";\nimport type { Employee, LoginCredentials } from \"@shared/schema\";\n\nexport function useAuth() {\n  const [isAuthenticated, setIsAuthenticated] = useState(!!getAuthToken());\n  const queryClient = useQueryClient();\n\n  const { data: user, isLoading } = useQuery<Employee | null>({\n    queryKey: [\"/api/auth/me\"],\n    enabled: isAuthenticated,\n    retry: false,\n    queryFn: async () => {\n      try {\n        const response = await fetch(\"/api/auth/me\", {\n          headers: getAuthHeaders(),\n        });\n        if (!response.ok) {\n          if (response.status === 401 || response.status === 403) {\n            removeAuthToken();\n            setIsAuthenticated(false);\n            return null;\n          }\n          throw new Error(\"Failed to fetch user\");\n        }\n        return await response.json();\n      } catch (error) {\n        removeAuthToken();\n        setIsAuthenticated(false);\n        return null;\n      }\n    },\n    \n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: LoginCredentials) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/login\", credentials);\n      return await response.json();\n    },\n    onSuccess: (data) => {\n      setAuthToken(data.token);\n      setIsAuthenticated(true);\n      queryClient.setQueryData([\"/api/auth/me\"], data.employee);\n    },\n  });\n\n  const logout = () => {\n    removeAuthToken();\n    setIsAuthenticated(false);\n    queryClient.clear();\n    window.location.href = \"/\";\n  };\n\n  return {\n    user,\n    isAuthenticated,\n    isLoading,\n    login: loginMutation.mutateAsync,\n    loginError: loginMutation.error,\n    isLoginPending: loginMutation.isPending,\n    logout,\n  };\n}\n","size_bytes":1926},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/auth.ts":{"content":"import type { Employee } from \"@shared/schema\";\nimport { log } from \"console\";\n\nconst TOKEN_KEY = \"auth_token\";\n\n\n\nexport function getAuthToken(): string | null {\n  console.log(TOKEN_KEY);\n  return localStorage.getItem(TOKEN_KEY);\n}\n\nexport function setAuthToken(token: string): void {\n  localStorage.setItem(TOKEN_KEY, token);\n}\n\nexport function removeAuthToken(): void {\n  localStorage.removeItem(TOKEN_KEY);\n}\n\nexport function getAuthHeaders(): Record<string, string> {\n  const token = getAuthToken();\n  return token ? { Authorization: `Bearer ${token}` } : {};\n}\n\nexport function isAuthenticated(): boolean {\n  return !!getAuthToken();\n}\n\nexport function logout(): void {\n  removeAuthToken();\n  window.location.href = \"/\";\n}\n","size_bytes":729},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\nimport { getAuthHeaders } from \"./auth\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const headers = {\n    ...getAuthHeaders(),\n    ...(data ? { \"Content-Type\": \"application/json\" } : {}),\n  };\n\n  const res = await fetch(url, {\n    method,\n    headers,\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      headers: getAuthHeaders(),\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});","size_bytes":1516},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/admin-dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { format } from \"date-fns\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { getAuthHeaders } from \"@/lib/auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Sidebar from \"@/components/sidebar\";\nimport MetricCard from \"@/components/metric-card\";\nimport EmployeeForm from \"@/components/employee-form\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Users, Check, Hourglass, Building, Plus, Edit, Trash2 } from \"lucide-react\";\nimport type { Employee, LeaveRequest, Attendance } from \"@shared/schema\";\n\ninterface DashboardStats {\n  totalEmployees: number;\n  presentToday: number;\n  pendingLeaves: number;\n  departments: number;\n}\n\nexport default function AdminDashboard() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedEmployee, setSelectedEmployee] = useState<Employee | null>(null);\n  const [isEmployeeDialogOpen, setIsEmployeeDialogOpen] = useState(false);\n\n  // Fetch dashboard stats\n  const { data: stats = { totalEmployees: 0, presentToday: 0, pendingLeaves: 0, departments: 0 } } = useQuery<DashboardStats>({\n    queryKey: [\"/api/dashboard/stats\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/dashboard/stats\", {\n        headers: getAuthHeaders(),\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch stats\");\n      return await response.json();\n    },\n  });\n\n  // Fetch employees\n  const { data: employees = [] } = useQuery<Employee[]>({\n    queryKey: [\"/api/employees\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/employees\", {\n        headers: getAuthHeaders(),\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch employees\");\n      return await response.json();\n    },\n  });\n\n  // Fetch pending leave requests\n  const { data: pendingLeaves = [] } = useQuery<(LeaveRequest & { employee: Employee })[]>({\n    queryKey: [\"/api/leave-requests/pending\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/leave-requests/pending\", {\n        headers: getAuthHeaders(),\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch pending leaves\");\n      return await response.json();\n    },\n  });\n\n  // Fetch today's attendance\n  const { data: todayAttendance = [] } = useQuery<(Attendance & { employee: Employee })[]>({\n    queryKey: [\"/api/attendance/today\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/attendance/today\", {\n        headers: getAuthHeaders(),\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch attendance\");\n      return await response.json();\n    },\n  });\n\n  // Employee mutations\n  const createEmployeeMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest(\"POST\", \"/api/employees\", data);\n      return await response.json();\n    },\n    onSuccess: () => {\n      toast({ title: \"Success\", description: \"Employee created successfully\" });\n      setIsEmployeeDialogOpen(false);\n      setSelectedEmployee(null);\n      queryClient.invalidateQueries({ queryKey: [\"/api/employees\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create employee\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateEmployeeMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      const response = await apiRequest(\"PUT\", `/api/employees/${id}`, data);\n      return await response.json();\n    },\n    onSuccess: () => {\n      toast({ title: \"Success\", description: \"Employee updated successfully\" });\n      setIsEmployeeDialogOpen(false);\n      setSelectedEmployee(null);\n      queryClient.invalidateQueries({ queryKey: [\"/api/employees\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update employee\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteEmployeeMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest(\"DELETE\", `/api/employees/${id}`);\n      return await response.json();\n    },\n    onSuccess: () => {\n      toast({ title: \"Success\", description: \"Employee deleted successfully\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/employees\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete employee\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Leave request mutations\n  const updateLeaveStatusMutation = useMutation({\n    mutationFn: async ({ id, status, comments }: { id: string; status: \"approved\" | \"rejected\"; comments?: string }) => {\n      const response = await apiRequest(\"PUT\", `/api/leave-requests/${id}/status`, {\n        status,\n        reviewComments: comments,\n      });\n      return await response.json();\n    },\n    onSuccess: () => {\n      toast({ title: \"Success\", description: \"Leave request updated successfully\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/leave-requests/pending\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update leave request\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleEmployeeSubmit = (data: any) => {\n    if (selectedEmployee) {\n      updateEmployeeMutation.mutate({ id: selectedEmployee.id, data });\n    } else {\n      createEmployeeMutation.mutate(data);\n    }\n  };\n\n  const handleDeleteEmployee = (id: string) => {\n    if (confirm(\"Are you sure you want to delete this employee?\")) {\n      deleteEmployeeMutation.mutate(id);\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case \"pending\":\n        return <Badge className=\"bg-yellow-100 text-yellow-800 hover:bg-yellow-100\">Pending</Badge>;\n      case \"approved\":\n        return <Badge className=\"bg-green-100 text-green-800 hover:bg-green-100\">Approved</Badge>;\n      case \"rejected\":\n        return <Badge className=\"bg-red-100 text-red-800 hover:bg-red-100\">Rejected</Badge>;\n      case \"present\":\n        return <Badge className=\"bg-blue-100 text-blue-800 hover:bg-blue-100\">Present</Badge>;\n      default:\n        return <Badge variant=\"secondary\">{status}</Badge>;\n    }\n  };\n\n  const getInitials = (firstName: string, lastName: string) => {\n    return `${firstName.charAt(0)}${lastName.charAt(0)}`.toUpperCase();\n  };\n\n  return (\n    <div className=\"flex h-screen bg-background\">\n      <Sidebar />\n      \n      <div className=\"flex-1 overflow-hidden\">\n        <div className=\"relative z-0 flex-1 overflow-y-auto focus:outline-none\">\n          <div className=\"py-6\">\n            <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n              {/* Header */}\n              <div className=\"mb-8\">\n                <h1 className=\"text-2xl font-bold\">Admin Dashboard</h1>\n                <p className=\"text-muted-foreground\">Manage your organization's workforce and operations.</p>\n              </div>\n\n              {/* Admin Metrics */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n                <MetricCard\n                  title=\"Total Employees\"\n                  value={stats.totalEmployees}\n                  icon={Users}\n                  iconColor=\"text-primary\"\n                />\n                \n                <MetricCard\n                  title=\"Present Today\"\n                  value={stats.presentToday}\n                  icon={Check}\n                  iconColor=\"text-accent\"\n                  valueColor=\"text-accent\"\n                />\n                \n                <MetricCard\n                  title=\"Pending Leaves\"\n                  value={stats.pendingLeaves}\n                  icon={Hourglass}\n                  iconColor=\"text-yellow-600\"\n                  valueColor=\"text-yellow-600\"\n                />\n                \n                <MetricCard\n                  title=\"Departments\"\n                  value={stats.departments}\n                  icon={Building}\n                  iconColor=\"text-purple-600\"\n                />\n              </div>\n\n              {/* Employee Management & Leave Requests */}\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8\">\n                {/* Employee Management */}\n                <div className=\"bg-card rounded-lg border border-border p-6\">\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <h3 className=\"text-lg font-semibold\">Employee Management</h3>\n                    <Dialog open={isEmployeeDialogOpen} onOpenChange={setIsEmployeeDialogOpen}>\n                      <DialogTrigger asChild>\n                        <Button \n                          onClick={() => setSelectedEmployee(null)}\n                          data-testid=\"button-add-employee\"\n                        >\n                          <Plus className=\"mr-2 h-4 w-4\" />\n                          Add Employee\n                        </Button>\n                      </DialogTrigger>\n                      <DialogContent className=\"max-w-2xl\">\n                        <DialogHeader>\n                          <DialogTitle>\n                            {selectedEmployee ? \"Edit Employee\" : \"Add Employee\"}\n                          </DialogTitle>\n                        </DialogHeader>\n                        <EmployeeForm\n                          employee={selectedEmployee || undefined}\n                          onSubmit={handleEmployeeSubmit}\n                          onCancel={() => {\n                            setIsEmployeeDialogOpen(false);\n                            setSelectedEmployee(null);\n                          }}\n                          isLoading={createEmployeeMutation.isPending || updateEmployeeMutation.isPending}\n                        />\n                      </DialogContent>\n                    </Dialog>\n                  </div>\n                  <div className=\"space-y-3\">\n                    {employees.slice(0, 5).map((employee) => (\n                      <div key={employee.id} className=\"flex items-center justify-between p-3 bg-secondary rounded-lg\">\n                        <div className=\"flex items-center space-x-3\">\n                          <div className=\"h-8 w-8 bg-primary/10 rounded-full flex items-center justify-center\">\n                            <span className=\"text-xs font-medium text-primary\">\n                              {getInitials(employee.firstName, employee.lastName)}\n                            </span>\n                          </div>\n                          <div>\n                            <p className=\"text-sm font-medium\" data-testid={`text-employee-${employee.id}`}>\n                              {employee.firstName} {employee.lastName}\n                            </p>\n                            <p className=\"text-xs text-muted-foreground\">{employee.position}</p>\n                          </div>\n                        </div>\n                        <div className=\"flex space-x-2\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => {\n                              setSelectedEmployee(employee);\n                              setIsEmployeeDialogOpen(true);\n                            }}\n                            data-testid={`button-edit-${employee.id}`}\n                          >\n                            <Edit className=\"h-4 w-4\" />\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleDeleteEmployee(employee.id)}\n                            data-testid={`button-delete-${employee.id}`}\n                          >\n                            <Trash2 className=\"h-4 w-4 text-destructive\" />\n                          </Button>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Pending Leave Requests */}\n                <div className=\"bg-card rounded-lg border border-border p-6\">\n                  <h3 className=\"text-lg font-semibold mb-4\">Pending Leave Requests</h3>\n                  <div className=\"space-y-4\">\n                    {pendingLeaves.length === 0 ? (\n                      <p className=\"text-muted-foreground text-center py-4\" data-testid=\"text-no-pending-leaves\">\n                        No pending leave requests\n                      </p>\n                    ) : (\n                      pendingLeaves.map((leave) => (\n                        <div key={leave.id} className=\"border border-border rounded-lg p-4\">\n                          <div className=\"flex items-start justify-between mb-2\">\n                            <div>\n                              <p className=\"font-medium\">\n                                {leave.employee.firstName} {leave.employee.lastName}\n                              </p>\n                              <p className=\"text-sm text-muted-foreground capitalize\">\n                                {leave.leaveType} • {leave.daysRequested} days\n                              </p>\n                              <p className=\"text-xs text-muted-foreground\">\n                                {format(new Date(leave.startDate), \"MMM dd\")} - {format(new Date(leave.endDate), \"MMM dd, yyyy\")}\n                              </p>\n                            </div>\n                            {getStatusBadge(leave.status)}\n                          </div>\n                          {leave.reason && (\n                            <p className=\"text-sm text-muted-foreground mb-3\">{leave.reason}</p>\n                          )}\n                          <div className=\"flex space-x-2\">\n                            <Button\n                              size=\"sm\"\n                              className=\"bg-accent text-accent-foreground hover:bg-accent/90\"\n                              onClick={() => updateLeaveStatusMutation.mutate({ \n                                id: leave.id, \n                                status: \"approved\" \n                              })}\n                              disabled={updateLeaveStatusMutation.isPending}\n                              data-testid={`button-approve-${leave.id}`}\n                            >\n                              Approve\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              variant=\"destructive\"\n                              onClick={() => updateLeaveStatusMutation.mutate({ \n                                id: leave.id, \n                                status: \"rejected\" \n                              })}\n                              disabled={updateLeaveStatusMutation.isPending}\n                              data-testid={`button-reject-${leave.id}`}\n                            >\n                              Reject\n                            </Button>\n                          </div>\n                        </div>\n                      ))\n                    )}\n                  </div>\n                </div>\n              </div>\n\n              {/* Today's Attendance */}\n              <div className=\"bg-card rounded-lg border border-border p-6\">\n                <h3 className=\"text-lg font-semibold mb-4\">Today's Attendance</h3>\n                {todayAttendance.length === 0 ? (\n                  <p className=\"text-muted-foreground text-center py-8\" data-testid=\"text-no-attendance\">\n                    No attendance records for today\n                  </p>\n                ) : (\n                  <div className=\"overflow-x-auto\">\n                    <table className=\"min-w-full divide-y divide-border\">\n                      <thead>\n                        <tr>\n                          <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">Employee</th>\n                          <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">Department</th>\n                          <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">Check In</th>\n                          <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">Check Out</th>\n                          <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">Status</th>\n                        </tr>\n                      </thead>\n                      <tbody className=\"divide-y divide-border\">\n                        {todayAttendance.map((record) => (\n                          <tr key={record.id} data-testid={`row-attendance-${record.id}`}>\n                            <td className=\"px-6 py-4 whitespace-nowrap\">\n                              <div className=\"flex items-center\">\n                                <div className=\"h-8 w-8 bg-primary/10 rounded-full flex items-center justify-center mr-3\">\n                                  <span className=\"text-xs font-medium text-primary\">\n                                    {getInitials(record.employee.firstName, record.employee.lastName)}\n                                  </span>\n                                </div>\n                                <div>\n                                  <p className=\"text-sm font-medium\">\n                                    {record.employee.firstName} {record.employee.lastName}\n                                  </p>\n                                  <p className=\"text-xs text-muted-foreground\">{record.employee.position}</p>\n                                </div>\n                              </div>\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap text-sm text-muted-foreground\">\n                              {record.employee.department}\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap text-sm text-muted-foreground\">\n                              {record.checkInTime ? format(new Date(record.checkInTime), \"hh:mm a\") : \"--\"}\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap text-sm text-muted-foreground\">\n                              {record.checkOutTime ? format(new Date(record.checkOutTime), \"hh:mm a\") : \"--\"}\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap\">\n                              {getStatusBadge(record.checkOutTime ? \"completed\" : record.status)}\n                            </td>\n                          </tr>\n                        ))}\n                      </tbody>\n                    </table>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":19607},"client/src/pages/employee-dashboard.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { format } from \"date-fns\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { getAuthHeaders } from \"@/lib/auth\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Sidebar from \"@/components/sidebar\";\nimport MetricCard from \"@/components/metric-card\";\nimport LeaveRequestForm from \"@/components/leave-request-form\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Check, Clock, Calendar, Coffee, Hourglass } from \"lucide-react\";\nimport type { Attendance, LeaveRequest } from \"@shared/schema\";\n\n\nasync function handleCheckIn() {\n  await fetch(\"/api/attendance/checkin\", {\n    method: \"POST\",\n    headers: {\n      ...getAuthHeaders(),\n      \"Content-Type\": \"application/json\",\n    },\n  });\n}\n\nexport default function EmployeeDashboard() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch today's attendance\n  const { data: todayAttendance } = useQuery<Attendance | null>({\n    queryKey: [\"/api/attendance/my\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/attendance/my\", {\n        headers: getAuthHeaders(),\n      });\n      if (!response.ok) return null;\n      return await response.json();\n    },\n  });\n\n  // Fetch leave requests\n  const { data: leaveRequests = [] } = useQuery<LeaveRequest[]>({\n    queryKey: [\"/api/leave-requests/my\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/leave-requests/my\", {\n        headers: getAuthHeaders(),\n      });\n      if (!response.ok) return [];\n      return await response.json();\n    },\n  });\n\n  // Check-in mutation\n  const checkInMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", \"/api/attendance/checkin\");\n      return await response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Checked in successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/attendance/my\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to check in\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Check-out mutation\n  const checkOutMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", \"/api/attendance/checkout\");\n      return await response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Checked out successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/attendance/my\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to check out\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case \"pending\":\n        return <Badge className=\"bg-yellow-100 text-yellow-800 hover:bg-yellow-100\">Pending</Badge>;\n      case \"approved\":\n        return <Badge className=\"bg-green-100 text-green-800 hover:bg-green-100\">Approved</Badge>;\n      case \"rejected\":\n        return <Badge className=\"bg-red-100 text-red-800 hover:bg-red-100\">Rejected</Badge>;\n      default:\n        return <Badge variant=\"secondary\">{status}</Badge>;\n    }\n  };\n\n  const isCheckedIn = todayAttendance?.checkInTime && !todayAttendance?.checkOutTime;\n  const isCheckedOut = todayAttendance?.checkOutTime;\n  const pendingLeaves = leaveRequests.filter(leave => leave.status === \"pending\").length;\n  const hoursToday = todayAttendance?.hoursWorked || 0;\n\n  return (\n    <div className=\"flex h-screen bg-background\">\n      <Sidebar />\n      \n      <div className=\"flex-1 overflow-hidden\">\n        <div className=\"relative z-0 flex-1 overflow-y-auto focus:outline-none\">\n          <div className=\"py-6\">\n            <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n              {/* Header */}\n              <div className=\"mb-8\">\n                <h1 className=\"text-2xl font-bold\">\n                  Welcome back, <span data-testid=\"text-employee-name\">{user?.firstName}</span>!\n                </h1>\n                <p className=\"text-muted-foreground\">Here's what's happening with your account today.</p>\n              </div>\n\n              {/* Quick Metrics */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n                <MetricCard\n                  title=\"Today's Status\"\n                  value={isCheckedOut ? \"Completed\" : isCheckedIn ? \"Present\" : \"Not Checked In\"}\n                  icon={Check}\n                  iconColor=\"text-accent\"\n                  valueColor={isCheckedOut ? \"text-accent\" : isCheckedIn ? \"text-accent\" : \"text-muted-foreground\"}\n                />\n                \n                <MetricCard\n                  title=\"Hours Today\"\n                  value={hoursToday}\n                  icon={Clock}\n                  iconColor=\"text-primary\"\n                />\n                \n                <MetricCard\n                  title=\"Leave Balance\"\n                  value={user?.leaveBalance || 0}\n                  icon={Calendar}\n                  iconColor=\"text-yellow-600\"\n                />\n                \n                <MetricCard\n                  title=\"Pending Requests\"\n                  value={pendingLeaves}\n                  icon={Hourglass}\n                  iconColor=\"text-yellow-600\"\n                  valueColor=\"text-yellow-600\"\n                />\n              </div>\n\n              {/* Attendance and Leave Request Forms */}\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8\">\n                {/* Quick Check-in */}\n                <div className=\"bg-card rounded-lg border border-border p-6\">\n                  <h3 className=\"text-lg font-semibold mb-4\">Quick Check-in</h3>\n                  <div className=\"space-y-4\">\n                    {todayAttendance ? (\n                      <div className=\"flex items-center justify-between p-4 bg-secondary rounded-lg\">\n                        <div>\n                          <p className=\"font-medium\">Check-in Time</p>\n                          <p className=\"text-sm text-muted-foreground\" data-testid=\"text-checkin-time\">\n                            {todayAttendance.checkInTime \n                              ? format(new Date(todayAttendance.checkInTime), \"hh:mm a\")\n                              : \"Not checked in\"\n                            }\n                          </p>\n                          {todayAttendance.checkOutTime && (\n                            <>\n                              <p className=\"font-medium mt-2\">Check-out Time</p>\n                              <p className=\"text-sm text-muted-foreground\" data-testid=\"text-checkout-time\">\n                                {format(new Date(todayAttendance.checkOutTime), \"hh:mm a\")}\n                              </p>\n                            </>\n                          )}\n                        </div>\n                        <Badge className=\"bg-blue-100 text-blue-800 hover:bg-blue-100\" data-testid=\"status-present\">\n                          {isCheckedOut ? \"Completed\" : \"Present\"}\n                        </Badge>\n                      </div>\n                    ) : (\n                      <div className=\"flex items-center justify-between p-4 bg-secondary rounded-lg\">\n                        <div>\n                          <p className=\"font-medium\">Not Checked In</p>\n                          <p className=\"text-sm text-muted-foreground\">Click check-in to start your day</p>\n                        </div>\n                      </div>\n                    )}\n                    \n                    <div className=\"flex space-x-3\">\n                      {!isCheckedIn && !isCheckedOut && (\n                        <Button \n                          onClick={() => checkInMutation.mutate()}\n                          disabled={checkInMutation.isPending}\n                          className=\"flex-1\"\n                          data-testid=\"button-checkin\"\n                        >\n                          <Clock className=\"mr-2 h-4 w-4\" />\n                          {checkInMutation.isPending ? \"Checking in...\" : \"Check In\"}\n                        </Button>\n                      )}\n                      \n                      {isCheckedIn && (\n                        <Button \n                          onClick={() => checkOutMutation.mutate()}\n                          disabled={checkOutMutation.isPending}\n                          className=\"flex-1\"\n                          data-testid=\"button-checkout\"\n                        >\n                          <Clock className=\"mr-2 h-4 w-4\" />\n                          {checkOutMutation.isPending ? \"Checking out...\" : \"Check Out\"}\n                        </Button>\n                      )}\n                      \n                      <Button variant=\"outline\" className=\"flex-1\" data-testid=\"button-break\">\n                        <Coffee className=\"mr-2 h-4 w-4\" />\n                        Break\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Leave Request Form */}\n                <LeaveRequestForm />\n              </div>\n\n              {/* Recent Leave Requests */}\n              <div className=\"bg-card rounded-lg border border-border p-6\">\n                <h3 className=\"text-lg font-semibold mb-4\">Recent Leave Requests</h3>\n                {leaveRequests.length === 0 ? (\n                  <p className=\"text-muted-foreground text-center py-8\" data-testid=\"text-no-requests\">\n                    No leave requests found\n                  </p>\n                ) : (\n                  <div className=\"overflow-x-auto\">\n                    <table className=\"min-w-full divide-y divide-border\">\n                      <thead>\n                        <tr>\n                          <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">Type</th>\n                          <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">Dates</th>\n                          <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">Days</th>\n                          <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">Status</th>\n                        </tr>\n                      </thead>\n                      <tbody className=\"divide-y divide-border\">\n                        {leaveRequests.map((leave) => (\n                          <tr key={leave.id} data-testid={`row-leave-${leave.id}`}>\n                            <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium capitalize\">\n                              {leave.leaveType}\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap text-sm text-muted-foreground\">\n                              {format(new Date(leave.startDate), \"MMM dd\")} - {format(new Date(leave.endDate), \"MMM dd\")}\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap text-sm text-muted-foreground\">\n                              {leave.daysRequested}\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap\">\n                              {getStatusBadge(leave.status)}\n                            </td>\n                          </tr>\n                        ))}\n                      </tbody>\n                    </table>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":11962},"client/src/pages/login.tsx":{"content":"import { useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { loginSchema, type LoginCredentials } from \"@shared/schema\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Users } from \"lucide-react\";\n\nexport default function Login() {\n  const [, setLocation] = useLocation();\n  const { login, isLoginPending, loginError, isAuthenticated, user } = useAuth();\n\n  const form = useForm<LoginCredentials>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  useEffect(() => {\n    if (isAuthenticated && user) {\n      setLocation(user.role === \"admin\" ? \"/admin\" : \"/dashboard\");\n    }\n  }, [isAuthenticated, user, setLocation]);\n\n  const onSubmit = async (data: LoginCredentials) => {\n    try {\n      \n      await login(data);\n      console.log(data);\n    } catch (error) {\n      // Error handling is done in the useAuth hook\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-secondary flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-md w-full space-y-8\">\n        <div className=\"text-center\">\n          <div className=\"mx-auto h-12 w-12 flex items-center justify-center rounded-full bg-primary\">\n            <Users className=\"text-primary-foreground text-xl\" />\n          </div>\n          <h2 className=\"mt-6 text-3xl font-bold\">Sign in to your account</h2>\n          <p className=\"mt-2 text-sm text-muted-foreground\">\n            Employee Management System\n          </p>\n        </div>\n        \n        <div className=\"bg-card rounded-lg shadow-sm p-8 space-y-6\">\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n              {loginError && (\n                <Alert variant=\"destructive\">\n                  <AlertDescription>\n                    {loginError.message || \"Invalid credentials\"}\n                  </AlertDescription>\n                </Alert>\n              )}\n              \n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email address</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"email\" \n                        placeholder=\"john.doe@company.com\"\n                        {...field}\n                        data-testid=\"input-email\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Password</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"password\" \n                        placeholder=\"••••••••\"\n                        {...field}\n                        data-testid=\"input-password\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <Button \n                type=\"submit\" \n                className=\"w-full\"\n                disabled={isLoginPending}\n                data-testid=\"button-signin\"\n              >\n                {isLoginPending ? \"Signing in...\" : \"Sign in\"}\n              </Button>\n            </form>\n          </Form>\n          \n          <div className=\"text-center\">\n            <p className=\"text-sm text-muted-foreground\">\n              Demo System - Contact your administrator for credentials\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4214},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/admin-employees.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { format } from \"date-fns\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { getAuthHeaders } from \"@/lib/auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Sidebar from \"@/components/sidebar\";\nimport EmployeeForm from \"@/components/employee-form\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Plus, Search, Edit, Trash2, Users, UserCheck, UserX, Filter } from \"lucide-react\";\nimport type { Employee } from \"@shared/schema\";\n\nexport default function AdminEmployees() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedEmployee, setSelectedEmployee] = useState<Employee | null>(null);\n  const [isEmployeeDialogOpen, setIsEmployeeDialogOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [departmentFilter, setDepartmentFilter] = useState(\"all\");\n  const [roleFilter, setRoleFilter] = useState(\"all\");\n\n  // Fetch employees\n  const { data: employees = [], isLoading } = useQuery<Employee[]>({\n    queryKey: [\"/api/employees\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/employees\", {\n        headers: getAuthHeaders(),\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch employees\");\n      return await response.json();\n    },\n  });\n\n  // Employee mutations\n  const createEmployeeMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest(\"POST\", \"/api/employees\", data);\n      return await response.json();\n    },\n    onSuccess: () => {\n      toast({ title: \"Success\", description: \"Employee created successfully\" });\n      setIsEmployeeDialogOpen(false);\n      setSelectedEmployee(null);\n      queryClient.invalidateQueries({ queryKey: [\"/api/employees\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create employee\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateEmployeeMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      const response = await apiRequest(\"PUT\", `/api/employees/${id}`, data);\n      return await response.json();\n    },\n    onSuccess: () => {\n      toast({ title: \"Success\", description: \"Employee updated successfully\" });\n      setIsEmployeeDialogOpen(false);\n      setSelectedEmployee(null);\n      queryClient.invalidateQueries({ queryKey: [\"/api/employees\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update employee\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteEmployeeMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest(\"DELETE\", `/api/employees/${id}`);\n      return await response.json();\n    },\n    onSuccess: () => {\n      toast({ title: \"Success\", description: \"Employee deleted successfully\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/employees\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete employee\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleEmployeeSubmit = (data: any) => {\n    if (selectedEmployee) {\n      updateEmployeeMutation.mutate({ id: selectedEmployee.id, data });\n    } else {\n      createEmployeeMutation.mutate(data);\n    }\n  };\n\n  const handleDeleteEmployee = (id: string, name: string) => {\n    deleteEmployeeMutation.mutate(id);\n  };\n\n  const getInitials = (firstName: string, lastName: string) => {\n    return `${firstName.charAt(0)}${lastName.charAt(0)}`.toUpperCase();\n  };\n\n  const getRoleBadge = (role: string) => {\n    return role === \"admin\" ? (\n      <Badge className=\"bg-blue-100 text-blue-800 hover:bg-blue-100\">Admin</Badge>\n    ) : (\n      <Badge variant=\"secondary\">Employee</Badge>\n    );\n  };\n\n  const getStatusBadge = (isActive: boolean) => {\n    return isActive ? (\n      <Badge className=\"bg-green-100 text-green-800 hover:bg-green-100\">Active</Badge>\n    ) : (\n      <Badge className=\"bg-red-100 text-red-800 hover:bg-red-100\">Inactive</Badge>\n    );\n  };\n\n  // Get unique departments for filter\n  const departments = Array.from(new Set(employees.map(emp => emp.department)));\n\n  // Filter employees based on search and filters\n  const filteredEmployees = employees.filter(employee => {\n    const matchesSearch = \n      employee.firstName.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      employee.lastName.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      employee.email.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      employee.position.toLowerCase().includes(searchQuery.toLowerCase());\n    \n    const matchesDepartment = departmentFilter === \"all\" || employee.department === departmentFilter;\n    const matchesRole = roleFilter === \"all\" || employee.role === roleFilter;\n    \n    return matchesSearch && matchesDepartment && matchesRole;\n  });\n\n  // Calculate stats\n  const stats = {\n    total: employees.length,\n    active: employees.filter(emp => emp.isActive).length,\n    inactive: employees.filter(emp => !emp.isActive).length,\n    admins: employees.filter(emp => emp.role === \"admin\").length,\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex h-screen bg-background\">\n        <Sidebar />\n        <div className=\"flex-1 flex items-center justify-center\">\n          <div className=\"text-muted-foreground\">Loading employees...</div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen bg-background\">\n      <Sidebar />\n      \n      <div className=\"flex-1 overflow-hidden\">\n        <div className=\"relative z-0 flex-1 overflow-y-auto focus:outline-none\">\n          <div className=\"py-6\">\n            <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n              {/* Header */}\n              <div className=\"mb-8\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h1 className=\"text-2xl font-bold\">Employee Management</h1>\n                    <p className=\"text-muted-foreground\">Manage your organization's workforce.</p>\n                  </div>\n                  <Dialog open={isEmployeeDialogOpen} onOpenChange={setIsEmployeeDialogOpen}>\n                    <DialogTrigger asChild>\n                      <Button \n                        onClick={() => setSelectedEmployee(null)}\n                        data-testid=\"button-add-employee\"\n                      >\n                        <Plus className=\"mr-2 h-4 w-4\" />\n                        Add Employee\n                      </Button>\n                    </DialogTrigger>\n                    <DialogContent className=\"max-w-2xl\">\n                      <DialogHeader>\n                        <DialogTitle>\n                          {selectedEmployee ? \"Edit Employee\" : \"Add Employee\"}\n                        </DialogTitle>\n                      </DialogHeader>\n                      <EmployeeForm\n                        employee={selectedEmployee || undefined}\n                        onSubmit={handleEmployeeSubmit}\n                        onCancel={() => {\n                          setIsEmployeeDialogOpen(false);\n                          setSelectedEmployee(null);\n                        }}\n                        isLoading={createEmployeeMutation.isPending || updateEmployeeMutation.isPending}\n                      />\n                    </DialogContent>\n                  </Dialog>\n                </div>\n              </div>\n\n              {/* Stats Cards */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Total Employees</CardTitle>\n                    <Users className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\" data-testid=\"stat-total-employees\">{stats.total}</div>\n                  </CardContent>\n                </Card>\n                \n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Active Employees</CardTitle>\n                    <UserCheck className=\"h-4 w-4 text-green-600\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-green-600\" data-testid=\"stat-active-employees\">{stats.active}</div>\n                  </CardContent>\n                </Card>\n                \n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Inactive Employees</CardTitle>\n                    <UserX className=\"h-4 w-4 text-red-600\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-red-600\" data-testid=\"stat-inactive-employees\">{stats.inactive}</div>\n                  </CardContent>\n                </Card>\n                \n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Administrators</CardTitle>\n                    <Filter className=\"h-4 w-4 text-blue-600\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-blue-600\" data-testid=\"stat-admin-employees\">{stats.admins}</div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Search and Filters */}\n              <Card className=\"mb-6\">\n                <CardHeader>\n                  <CardTitle>Search & Filter</CardTitle>\n                  <CardDescription>Find employees quickly using search and filters</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"flex flex-col space-y-4 md:flex-row md:space-y-0 md:space-x-4\">\n                    <div className=\"flex-1\">\n                      <div className=\"relative\">\n                        <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                        <Input\n                          placeholder=\"Search by name, email, or position...\"\n                          value={searchQuery}\n                          onChange={(e) => setSearchQuery(e.target.value)}\n                          className=\"pl-9\"\n                          data-testid=\"input-employee-search\"\n                        />\n                      </div>\n                    </div>\n                    \n                    <Select value={departmentFilter} onValueChange={setDepartmentFilter}>\n                      <SelectTrigger className=\"w-full md:w-48\" data-testid=\"select-department-filter\">\n                        <SelectValue placeholder=\"Department\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">All Departments</SelectItem>\n                        {departments.map(dept => (\n                          <SelectItem key={dept} value={dept}>{dept}</SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    \n                    <Select value={roleFilter} onValueChange={setRoleFilter}>\n                      <SelectTrigger className=\"w-full md:w-32\" data-testid=\"select-role-filter\">\n                        <SelectValue placeholder=\"Role\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">All Roles</SelectItem>\n                        <SelectItem value=\"admin\">Admin</SelectItem>\n                        <SelectItem value=\"employee\">Employee</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Employee List */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Employee Directory</CardTitle>\n                  <CardDescription>\n                    Showing {filteredEmployees.length} of {employees.length} employees\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  {filteredEmployees.length === 0 ? (\n                    <div className=\"text-center py-8\">\n                      <Users className=\"mx-auto h-12 w-12 text-muted-foreground\" />\n                      <h3 className=\"mt-2 text-sm font-semibold\">No employees found</h3>\n                      <p className=\"mt-1 text-sm text-muted-foreground\">\n                        {employees.length === 0 \n                          ? \"Get started by creating your first employee.\" \n                          : \"Try adjusting your search or filters.\"}\n                      </p>\n                    </div>\n                  ) : (\n                    <div className=\"overflow-x-auto\">\n                      <table className=\"min-w-full divide-y divide-border\">\n                        <thead>\n                          <tr>\n                            <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                              Employee\n                            </th>\n                            <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                              Position\n                            </th>\n                            <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                              Department\n                            </th>\n                            <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                              Role\n                            </th>\n                            <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                              Status\n                            </th>\n                            <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                              Leave Balance\n                            </th>\n                            <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                              Joined\n                            </th>\n                            <th className=\"px-6 py-3 text-right text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                              Actions\n                            </th>\n                          </tr>\n                        </thead>\n                        <tbody className=\"divide-y divide-border\">\n                          {filteredEmployees.map((employee) => (\n                            <tr key={employee.id} data-testid={`row-employee-${employee.id}`}>\n                              <td className=\"px-6 py-4 whitespace-nowrap\">\n                                <div className=\"flex items-center\">\n                                  <div className=\"h-10 w-10 bg-primary/10 rounded-full flex items-center justify-center mr-4\">\n                                    <span className=\"text-sm font-medium text-primary\">\n                                      {getInitials(employee.firstName, employee.lastName)}\n                                    </span>\n                                  </div>\n                                  <div>\n                                    <div className=\"text-sm font-medium\" data-testid={`text-employee-name-${employee.id}`}>\n                                      {employee.firstName} {employee.lastName}\n                                    </div>\n                                    <div className=\"text-sm text-muted-foreground\">\n                                      {employee.email}\n                                    </div>\n                                  </div>\n                                </div>\n                              </td>\n                              <td className=\"px-6 py-4 whitespace-nowrap text-sm text-muted-foreground\">\n                                {employee.position}\n                              </td>\n                              <td className=\"px-6 py-4 whitespace-nowrap text-sm text-muted-foreground\">\n                                {employee.department}\n                              </td>\n                              <td className=\"px-6 py-4 whitespace-nowrap\">\n                                {getRoleBadge(employee.role)}\n                              </td>\n                              <td className=\"px-6 py-4 whitespace-nowrap\">\n                                {getStatusBadge(employee.isActive)}\n                              </td>\n                              <td className=\"px-6 py-4 whitespace-nowrap text-sm text-muted-foreground\">\n                                {employee.leaveBalance} days\n                              </td>\n                              <td className=\"px-6 py-4 whitespace-nowrap text-sm text-muted-foreground\">\n                                {format(new Date(employee.createdAt), \"MMM dd, yyyy\")}\n                              </td>\n                              <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\n                                <div className=\"flex items-center justify-end space-x-2\">\n                                  <Button\n                                    variant=\"ghost\"\n                                    size=\"sm\"\n                                    onClick={() => {\n                                      setSelectedEmployee(employee);\n                                      setIsEmployeeDialogOpen(true);\n                                    }}\n                                    data-testid={`button-edit-employee-${employee.id}`}\n                                  >\n                                    <Edit className=\"h-4 w-4\" />\n                                  </Button>\n                                  <AlertDialog>\n                                    <AlertDialogTrigger asChild>\n                                      <Button\n                                        variant=\"ghost\"\n                                        size=\"sm\"\n                                        data-testid={`button-delete-employee-${employee.id}`}\n                                      >\n                                        <Trash2 className=\"h-4 w-4 text-destructive\" />\n                                      </Button>\n                                    </AlertDialogTrigger>\n                                    <AlertDialogContent>\n                                      <AlertDialogHeader>\n                                        <AlertDialogTitle>Delete Employee</AlertDialogTitle>\n                                        <AlertDialogDescription>\n                                          Are you sure you want to delete {employee.firstName} {employee.lastName}? \n                                          This action cannot be undone and will remove all associated data.\n                                        </AlertDialogDescription>\n                                      </AlertDialogHeader>\n                                      <AlertDialogFooter>\n                                        <AlertDialogCancel>Cancel</AlertDialogCancel>\n                                        <AlertDialogAction\n                                          onClick={() => handleDeleteEmployee(employee.id, `${employee.firstName} ${employee.lastName}`)}\n                                          className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n                                        >\n                                          Delete\n                                        </AlertDialogAction>\n                                      </AlertDialogFooter>\n                                    </AlertDialogContent>\n                                  </AlertDialog>\n                                </div>\n                              </td>\n                            </tr>\n                          ))}\n                        </tbody>\n                      </table>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":21747},"client/src/pages/admin-leave-requests.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { format } from \"date-fns\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { getAuthHeaders } from \"@/lib/auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Sidebar from \"@/components/sidebar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Search, Calendar, Clock, CheckCircle, XCircle, Eye, Filter } from \"lucide-react\";\nimport type { Employee, LeaveRequest } from \"@shared/schema\";\n\ntype LeaveRequestWithEmployee = LeaveRequest & { employee: Employee };\n\nexport default function AdminLeaveRequests() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [typeFilter, setTypeFilter] = useState(\"all\");\n  const [selectedRequest, setSelectedRequest] = useState<LeaveRequestWithEmployee | null>(null);\n  const [isDetailsDialogOpen, setIsDetailsDialogOpen] = useState(false);\n  const [reviewComments, setReviewComments] = useState(\"\");\n\n  // Fetch all leave requests\n  const { data: allLeaveRequests = [], isLoading } = useQuery<LeaveRequestWithEmployee[]>({\n    queryKey: [\"/api/leave-requests/all\"],\n    queryFn: async () => {\n      // Since there's no /all endpoint, we'll fetch pending and need to create an endpoint\n      // For now, let's use the pending endpoint and extend it\n      const response = await fetch(\"/api/leave-requests/pending\", {\n        headers: getAuthHeaders(),\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch leave requests\");\n      return await response.json();\n    },\n  });\n\n  // Fetch pending leave requests\n  const { data: pendingLeaveRequests = [] } = useQuery<LeaveRequestWithEmployee[]>({\n    queryKey: [\"/api/leave-requests/pending\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/leave-requests/pending\", {\n        headers: getAuthHeaders(),\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch pending leave requests\");\n      return await response.json();\n    },\n  });\n\n  // Update leave request status mutation\n  const updateLeaveStatusMutation = useMutation({\n    mutationFn: async ({ id, status, comments }: { id: string; status: \"approved\" | \"rejected\"; comments?: string }) => {\n      const response = await apiRequest(\"PUT\", `/api/leave-requests/${id}/status`, {\n        status,\n        reviewComments: comments,\n      });\n      return await response.json();\n    },\n    onSuccess: () => {\n      toast({ title: \"Success\", description: \"Leave request updated successfully\" });\n      setIsDetailsDialogOpen(false);\n      setSelectedRequest(null);\n      setReviewComments(\"\");\n      queryClient.invalidateQueries({ queryKey: [\"/api/leave-requests/pending\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/leave-requests/all\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update leave request\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleQuickAction = (request: LeaveRequestWithEmployee, status: \"approved\" | \"rejected\") => {\n    updateLeaveStatusMutation.mutate({ \n      id: request.id, \n      status,\n      comments: status === \"rejected\" ? \"Quick rejection via admin panel\" : undefined\n    });\n  };\n\n  const handleDetailedReview = (status: \"approved\" | \"rejected\") => {\n    if (!selectedRequest) return;\n    \n    updateLeaveStatusMutation.mutate({ \n      id: selectedRequest.id, \n      status,\n      comments: reviewComments.trim() || undefined\n    });\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case \"pending\":\n        return <Badge className=\"bg-yellow-100 text-yellow-800 hover:bg-yellow-100\">Pending</Badge>;\n      case \"approved\":\n        return <Badge className=\"bg-green-100 text-green-800 hover:bg-green-100\">Approved</Badge>;\n      case \"rejected\":\n        return <Badge className=\"bg-red-100 text-red-800 hover:bg-red-100\">Rejected</Badge>;\n      default:\n        return <Badge variant=\"secondary\">{status}</Badge>;\n    }\n  };\n\n  const getLeaveTypeBadge = (type: string) => {\n    const colors = {\n      sick: \"bg-red-50 text-red-700 border-red-200\",\n      vacation: \"bg-blue-50 text-blue-700 border-blue-200\",\n      personal: \"bg-purple-50 text-purple-700 border-purple-200\",\n      emergency: \"bg-orange-50 text-orange-700 border-orange-200\",\n    };\n    \n    return (\n      <Badge variant=\"outline\" className={colors[type as keyof typeof colors] || \"bg-gray-50 text-gray-700 border-gray-200\"}>\n        {type.charAt(0).toUpperCase() + type.slice(1)}\n      </Badge>\n    );\n  };\n\n  const getInitials = (firstName: string, lastName: string) => {\n    return `${firstName.charAt(0)}${lastName.charAt(0)}`.toUpperCase();\n  };\n\n  // Filter requests\n  const filteredRequests = pendingLeaveRequests.filter(request => {\n    const matchesSearch = \n      request.employee.firstName.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      request.employee.lastName.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      request.reason?.toLowerCase().includes(searchQuery.toLowerCase());\n    \n    const matchesStatus = statusFilter === \"all\" || request.status === statusFilter;\n    const matchesType = typeFilter === \"all\" || request.leaveType === typeFilter;\n    \n    return matchesSearch && matchesStatus && matchesType;\n  });\n\n  // Calculate stats\n  const stats = {\n    total: pendingLeaveRequests.length,\n    pending: pendingLeaveRequests.filter(req => req.status === \"pending\").length,\n    approved: pendingLeaveRequests.filter(req => req.status === \"approved\").length,\n    rejected: pendingLeaveRequests.filter(req => req.status === \"rejected\").length,\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex h-screen bg-background\">\n        <Sidebar />\n        <div className=\"flex-1 flex items-center justify-center\">\n          <div className=\"text-muted-foreground\">Loading leave requests...</div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen bg-background\">\n      <Sidebar />\n      \n      <div className=\"flex-1 overflow-hidden\">\n        <div className=\"relative z-0 flex-1 overflow-y-auto focus:outline-none\">\n          <div className=\"py-6\">\n            <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n              {/* Header */}\n              <div className=\"mb-8\">\n                <h1 className=\"text-2xl font-bold\">Leave Request Management</h1>\n                <p className=\"text-muted-foreground\">Review and manage employee leave requests.</p>\n              </div>\n\n              {/* Stats Cards */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Total Requests</CardTitle>\n                    <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\" data-testid=\"stat-total-requests\">{stats.total}</div>\n                  </CardContent>\n                </Card>\n                \n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Pending Review</CardTitle>\n                    <Clock className=\"h-4 w-4 text-yellow-600\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-yellow-600\" data-testid=\"stat-pending-requests\">{stats.pending}</div>\n                  </CardContent>\n                </Card>\n                \n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Approved</CardTitle>\n                    <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-green-600\" data-testid=\"stat-approved-requests\">{stats.approved}</div>\n                  </CardContent>\n                </Card>\n                \n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Rejected</CardTitle>\n                    <XCircle className=\"h-4 w-4 text-red-600\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-red-600\" data-testid=\"stat-rejected-requests\">{stats.rejected}</div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Search and Filters */}\n              <Card className=\"mb-6\">\n                <CardHeader>\n                  <CardTitle>Search & Filter</CardTitle>\n                  <CardDescription>Find specific leave requests quickly</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"flex flex-col space-y-4 md:flex-row md:space-y-0 md:space-x-4\">\n                    <div className=\"flex-1\">\n                      <div className=\"relative\">\n                        <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                        <Input\n                          placeholder=\"Search by employee name or reason...\"\n                          value={searchQuery}\n                          onChange={(e) => setSearchQuery(e.target.value)}\n                          className=\"pl-9\"\n                          data-testid=\"input-request-search\"\n                        />\n                      </div>\n                    </div>\n                    \n                    <Select value={statusFilter} onValueChange={setStatusFilter}>\n                      <SelectTrigger className=\"w-full md:w-32\" data-testid=\"select-status-filter\">\n                        <SelectValue placeholder=\"Status\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">All Status</SelectItem>\n                        <SelectItem value=\"pending\">Pending</SelectItem>\n                        <SelectItem value=\"approved\">Approved</SelectItem>\n                        <SelectItem value=\"rejected\">Rejected</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    \n                    <Select value={typeFilter} onValueChange={setTypeFilter}>\n                      <SelectTrigger className=\"w-full md:w-32\" data-testid=\"select-type-filter\">\n                        <SelectValue placeholder=\"Type\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">All Types</SelectItem>\n                        <SelectItem value=\"sick\">Sick</SelectItem>\n                        <SelectItem value=\"vacation\">Vacation</SelectItem>\n                        <SelectItem value=\"personal\">Personal</SelectItem>\n                        <SelectItem value=\"emergency\">Emergency</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Leave Requests List */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Leave Requests</CardTitle>\n                  <CardDescription>\n                    Showing {filteredRequests.length} of {pendingLeaveRequests.length} requests\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  {filteredRequests.length === 0 ? (\n                    <div className=\"text-center py-8\">\n                      <Calendar className=\"mx-auto h-12 w-12 text-muted-foreground\" />\n                      <h3 className=\"mt-2 text-sm font-semibold\">No leave requests found</h3>\n                      <p className=\"mt-1 text-sm text-muted-foreground\">\n                        {pendingLeaveRequests.length === 0 \n                          ? \"No leave requests have been submitted yet.\" \n                          : \"Try adjusting your search or filters.\"}\n                      </p>\n                    </div>\n                  ) : (\n                    <div className=\"space-y-4\">\n                      {filteredRequests.map((request) => (\n                        <div key={request.id} className=\"border border-border rounded-lg p-6\" data-testid={`card-request-${request.id}`}>\n                          <div className=\"flex items-start justify-between mb-4\">\n                            <div className=\"flex items-center space-x-4\">\n                              <div className=\"h-12 w-12 bg-primary/10 rounded-full flex items-center justify-center\">\n                                <span className=\"text-sm font-medium text-primary\">\n                                  {getInitials(request.employee.firstName, request.employee.lastName)}\n                                </span>\n                              </div>\n                              <div>\n                                <h3 className=\"text-lg font-semibold\" data-testid={`text-employee-name-${request.id}`}>\n                                  {request.employee.firstName} {request.employee.lastName}\n                                </h3>\n                                <p className=\"text-sm text-muted-foreground\">\n                                  {request.employee.position} • {request.employee.department}\n                                </p>\n                              </div>\n                            </div>\n                            <div className=\"flex items-center space-x-2\">\n                              {getLeaveTypeBadge(request.leaveType)}\n                              {getStatusBadge(request.status)}\n                            </div>\n                          </div>\n\n                          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\n                            <div>\n                              <p className=\"text-sm font-medium text-muted-foreground\">Duration</p>\n                              <p className=\"text-sm\">\n                                {format(new Date(request.startDate), \"MMM dd\")} - {format(new Date(request.endDate), \"MMM dd, yyyy\")}\n                              </p>\n                              <p className=\"text-xs text-muted-foreground\">{request.daysRequested} days</p>\n                            </div>\n                            <div>\n                              <p className=\"text-sm font-medium text-muted-foreground\">Submitted</p>\n                              <p className=\"text-sm\">{format(new Date(request.createdAt), \"MMM dd, yyyy 'at' hh:mm a\")}</p>\n                            </div>\n                            <div>\n                              <p className=\"text-sm font-medium text-muted-foreground\">Employee Balance</p>\n                              <p className=\"text-sm\">{request.employee.leaveBalance} days remaining</p>\n                            </div>\n                          </div>\n\n                          {request.reason && (\n                            <div className=\"mb-4\">\n                              <p className=\"text-sm font-medium text-muted-foreground mb-1\">Reason</p>\n                              <p className=\"text-sm bg-secondary p-3 rounded-md\">{request.reason}</p>\n                            </div>\n                          )}\n\n                          {request.status === \"pending\" && (\n                            <div className=\"flex items-center justify-between pt-4 border-t border-border\">\n                              <div className=\"flex space-x-2\">\n                                <Button\n                                  size=\"sm\"\n                                  className=\"bg-green-600 hover:bg-green-700 text-white\"\n                                  onClick={() => handleQuickAction(request, \"approved\")}\n                                  disabled={updateLeaveStatusMutation.isPending}\n                                  data-testid={`button-quick-approve-${request.id}`}\n                                >\n                                  <CheckCircle className=\"h-4 w-4 mr-2\" />\n                                  Quick Approve\n                                </Button>\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"destructive\"\n                                  onClick={() => handleQuickAction(request, \"rejected\")}\n                                  disabled={updateLeaveStatusMutation.isPending}\n                                  data-testid={`button-quick-reject-${request.id}`}\n                                >\n                                  <XCircle className=\"h-4 w-4 mr-2\" />\n                                  Quick Reject\n                                </Button>\n                              </div>\n                              <Dialog>\n                                <DialogTrigger asChild>\n                                  <Button\n                                    variant=\"outline\"\n                                    size=\"sm\"\n                                    onClick={() => {\n                                      setSelectedRequest(request);\n                                      setReviewComments(\"\");\n                                    }}\n                                    data-testid={`button-detailed-review-${request.id}`}\n                                  >\n                                    <Eye className=\"h-4 w-4 mr-2\" />\n                                    Detailed Review\n                                  </Button>\n                                </DialogTrigger>\n                                <DialogContent className=\"max-w-md\">\n                                  <DialogHeader>\n                                    <DialogTitle>Review Leave Request</DialogTitle>\n                                  </DialogHeader>\n                                  <div className=\"space-y-4\">\n                                    <div>\n                                      <p className=\"text-sm font-medium mb-2\">Add Review Comments (Optional)</p>\n                                      <Textarea\n                                        placeholder=\"Add any comments about this decision...\"\n                                        value={reviewComments}\n                                        onChange={(e) => setReviewComments(e.target.value)}\n                                        rows={3}\n                                        data-testid=\"textarea-review-comments\"\n                                      />\n                                    </div>\n                                    <div className=\"flex space-x-2\">\n                                      <Button\n                                        className=\"flex-1 bg-green-600 hover:bg-green-700 text-white\"\n                                        onClick={() => handleDetailedReview(\"approved\")}\n                                        disabled={updateLeaveStatusMutation.isPending}\n                                        data-testid=\"button-detailed-approve\"\n                                      >\n                                        Approve\n                                      </Button>\n                                      <Button\n                                        variant=\"destructive\"\n                                        className=\"flex-1\"\n                                        onClick={() => handleDetailedReview(\"rejected\")}\n                                        disabled={updateLeaveStatusMutation.isPending}\n                                        data-testid=\"button-detailed-reject\"\n                                      >\n                                        Reject\n                                      </Button>\n                                    </div>\n                                  </div>\n                                </DialogContent>\n                              </Dialog>\n                            </div>\n                          )}\n\n                          {request.status !== \"pending\" && request.reviewComments && (\n                            <div className=\"pt-4 border-t border-border\">\n                              <p className=\"text-sm font-medium text-muted-foreground mb-1\">Review Comments</p>\n                              <p className=\"text-sm bg-secondary p-3 rounded-md\">{request.reviewComments}</p>\n                            </div>\n                          )}\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":21646},"client/src/pages/admin-reports.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { format, subDays, startOfMonth, endOfMonth, eachDayOfInterval } from \"date-fns\";\nimport { getAuthHeaders } from \"@/lib/auth\";\nimport Sidebar from \"@/components/sidebar\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, PieChart, Pie, Cell, LineChart, Line } from \"recharts\";\nimport { Users, Calendar, Clock, TrendingUp, Download, Filter } from \"lucide-react\";\nimport type { Employee, LeaveRequest, Attendance } from \"@shared/schema\";\n\ninterface DashboardStats {\n  totalEmployees: number;\n  presentToday: number;\n  pendingLeaves: number;\n  departments: number;\n}\n\ntype LeaveRequestWithEmployee = LeaveRequest & { employee: Employee };\ntype AttendanceWithEmployee = Attendance & { employee: Employee };\n\nexport default function AdminReports() {\n  const [timeRange, setTimeRange] = useState(\"30\");\n  const [reportType, setReportType] = useState(\"overview\");\n\n  // Fetch dashboard stats\n  const { data: stats = { totalEmployees: 0, presentToday: 0, pendingLeaves: 0, departments: 0 } } = useQuery<DashboardStats>({\n    queryKey: [\"/api/dashboard/stats\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/dashboard/stats\", {\n        headers: getAuthHeaders(),\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch stats\");\n      return await response.json();\n    },\n  });\n\n  // Fetch employees for department analysis\n  const { data: employees = [] } = useQuery<Employee[]>({\n    queryKey: [\"/api/employees\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/employees\", {\n        headers: getAuthHeaders(),\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch employees\");\n      return await response.json();\n    },\n  });\n\n  // Fetch leave requests\n  const { data: leaveRequests = [] } = useQuery<LeaveRequestWithEmployee[]>({\n    queryKey: [\"/api/leave-requests/pending\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/leave-requests/pending\", {\n        headers: getAuthHeaders(),\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch leave requests\");\n      return await response.json();\n    },\n  });\n\n  // Fetch today's attendance\n  const { data: todayAttendance = [] } = useQuery<AttendanceWithEmployee[]>({\n    queryKey: [\"/api/attendance/today\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/attendance/today\", {\n        headers: getAuthHeaders(),\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch attendance\");\n      return await response.json();\n    },\n  });\n\n  // Calculate department distribution\n  const departmentData = employees.reduce((acc, emp) => {\n    const dept = emp.department;\n    acc[dept] = (acc[dept] || 0) + 1;\n    return acc;\n  }, {} as Record<string, number>);\n\n  const departmentChartData = Object.entries(departmentData).map(([name, value]) => ({\n    name,\n    value,\n    percentage: ((value / employees.length) * 100).toFixed(1)\n  }));\n\n  // Calculate role distribution\n  const roleData = employees.reduce((acc, emp) => {\n    const role = emp.role;\n    acc[role] = (acc[role] || 0) + 1;\n    return acc;\n  }, {} as Record<string, number>);\n\n  const roleChartData = Object.entries(roleData).map(([name, value]) => ({\n    name: name.charAt(0).toUpperCase() + name.slice(1),\n    value,\n    percentage: ((value / employees.length) * 100).toFixed(1)\n  }));\n\n  // Calculate leave type distribution\n  const leaveTypeData = leaveRequests.reduce((acc, req) => {\n    const type = req.leaveType;\n    acc[type] = (acc[type] || 0) + 1;\n    return acc;\n  }, {} as Record<string, number>);\n\n  const leaveTypeChartData = Object.entries(leaveTypeData).map(([name, value]) => ({\n    name: name.charAt(0).toUpperCase() + name.slice(1),\n    value,\n    percentage: leaveRequests.length > 0 ? ((value / leaveRequests.length) * 100).toFixed(1) : \"0\"\n  }));\n\n  // Generate mock attendance trend data for the past 30 days\n  const generateAttendanceTrend = () => {\n    const days = parseInt(timeRange);\n    const dates = eachDayOfInterval({\n      start: subDays(new Date(), days - 1),\n      end: new Date()\n    });\n\n    return dates.map(date => ({\n      date: format(date, \"MMM dd\"),\n      present: Math.floor(Math.random() * (stats.totalEmployees - 5)) + 5,\n      absent: Math.floor(Math.random() * 5),\n      total: stats.totalEmployees\n    }));\n  };\n\n  const attendanceTrendData = generateAttendanceTrend();\n\n  // Colors for charts\n  const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884D8', '#82CA9D'];\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case \"pending\":\n        return <Badge className=\"bg-yellow-100 text-yellow-800 hover:bg-yellow-100\">Pending</Badge>;\n      case \"approved\":\n        return <Badge className=\"bg-green-100 text-green-800 hover:bg-green-100\">Approved</Badge>;\n      case \"rejected\":\n        return <Badge className=\"bg-red-100 text-red-800 hover:bg-red-100\">Rejected</Badge>;\n      case \"active\":\n        return <Badge className=\"bg-green-100 text-green-800 hover:bg-green-100\">Active</Badge>;\n      default:\n        return <Badge variant=\"secondary\">{status}</Badge>;\n    }\n  };\n\n  return (\n    <div className=\"flex h-screen bg-background\">\n      <Sidebar />\n      \n      <div className=\"flex-1 overflow-hidden\">\n        <div className=\"relative z-0 flex-1 overflow-y-auto focus:outline-none\">\n          <div className=\"py-6\">\n            <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n              {/* Header */}\n              <div className=\"mb-8\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h1 className=\"text-2xl font-bold\">Reports & Analytics</h1>\n                    <p className=\"text-muted-foreground\">Comprehensive insights into your organization's performance.</p>\n                  </div>\n                  <div className=\"flex items-center space-x-4\">\n                    <Select value={reportType} onValueChange={setReportType}>\n                      <SelectTrigger className=\"w-40\" data-testid=\"select-report-type\">\n                        <SelectValue placeholder=\"Report Type\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"overview\">Overview</SelectItem>\n                        <SelectItem value=\"attendance\">Attendance</SelectItem>\n                        <SelectItem value=\"leaves\">Leave Analysis</SelectItem>\n                        <SelectItem value=\"departments\">Departments</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    \n                    <Select value={timeRange} onValueChange={setTimeRange}>\n                      <SelectTrigger className=\"w-32\" data-testid=\"select-time-range\">\n                        <SelectValue placeholder=\"Time Range\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"7\">Last 7 days</SelectItem>\n                        <SelectItem value=\"30\">Last 30 days</SelectItem>\n                        <SelectItem value=\"90\">Last 90 days</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n              </div>\n\n              {/* Overview Stats */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Total Employees</CardTitle>\n                    <Users className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\" data-testid=\"stat-total-employees\">{stats.totalEmployees}</div>\n                    <p className=\"text-xs text-muted-foreground\">Across all departments</p>\n                  </CardContent>\n                </Card>\n                \n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Present Today</CardTitle>\n                    <Clock className=\"h-4 w-4 text-green-600\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-green-600\" data-testid=\"stat-present-today\">{stats.presentToday}</div>\n                    <p className=\"text-xs text-muted-foreground\">\n                      {stats.totalEmployees > 0 ? `${((stats.presentToday / stats.totalEmployees) * 100).toFixed(1)}% attendance` : \"0% attendance\"}\n                    </p>\n                  </CardContent>\n                </Card>\n                \n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Pending Leaves</CardTitle>\n                    <Calendar className=\"h-4 w-4 text-yellow-600\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-yellow-600\" data-testid=\"stat-pending-leaves\">{stats.pendingLeaves}</div>\n                    <p className=\"text-xs text-muted-foreground\">Awaiting approval</p>\n                  </CardContent>\n                </Card>\n                \n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Departments</CardTitle>\n                    <TrendingUp className=\"h-4 w-4 text-purple-600\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-purple-600\" data-testid=\"stat-departments\">{stats.departments}</div>\n                    <p className=\"text-xs text-muted-foreground\">Active departments</p>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Charts Section */}\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8\">\n                {/* Attendance Trend */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Attendance Trend</CardTitle>\n                    <CardDescription>Daily attendance over the selected period</CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <ResponsiveContainer width=\"100%\" height={300}>\n                      <LineChart data={attendanceTrendData}>\n                        <CartesianGrid strokeDasharray=\"3 3\" />\n                        <XAxis dataKey=\"date\" />\n                        <YAxis />\n                        <Tooltip />\n                        <Line type=\"monotone\" dataKey=\"present\" stroke=\"#22c55e\" strokeWidth={2} name=\"Present\" />\n                        <Line type=\"monotone\" dataKey=\"absent\" stroke=\"#ef4444\" strokeWidth={2} name=\"Absent\" />\n                      </LineChart>\n                    </ResponsiveContainer>\n                  </CardContent>\n                </Card>\n\n                {/* Department Distribution */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Department Distribution</CardTitle>\n                    <CardDescription>Employee distribution across departments</CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <ResponsiveContainer width=\"100%\" height={300}>\n                      <PieChart>\n                        <Pie\n                          data={departmentChartData}\n                          cx=\"50%\"\n                          cy=\"50%\"\n                          labelLine={false}\n                          label={({ name, percentage }) => `${name} (${percentage}%)`}\n                          outerRadius={80}\n                          fill=\"#8884d8\"\n                          dataKey=\"value\"\n                        >\n                          {departmentChartData.map((entry, index) => (\n                            <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                          ))}\n                        </Pie>\n                        <Tooltip />\n                      </PieChart>\n                    </ResponsiveContainer>\n                  </CardContent>\n                </Card>\n\n                {/* Leave Type Distribution */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Leave Type Analysis</CardTitle>\n                    <CardDescription>Distribution of leave request types</CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    {leaveTypeChartData.length > 0 ? (\n                      <ResponsiveContainer width=\"100%\" height={300}>\n                        <BarChart data={leaveTypeChartData}>\n                          <CartesianGrid strokeDasharray=\"3 3\" />\n                          <XAxis dataKey=\"name\" />\n                          <YAxis />\n                          <Tooltip />\n                          <Bar dataKey=\"value\" fill=\"#8884d8\" />\n                        </BarChart>\n                      </ResponsiveContainer>\n                    ) : (\n                      <div className=\"flex items-center justify-center h-[300px]\">\n                        <div className=\"text-center\">\n                          <Calendar className=\"mx-auto h-12 w-12 text-muted-foreground\" />\n                          <h3 className=\"mt-2 text-sm font-semibold\">No leave data</h3>\n                          <p className=\"mt-1 text-sm text-muted-foreground\">\n                            No leave requests to analyze yet.\n                          </p>\n                        </div>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n\n                {/* Role Distribution */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Role Distribution</CardTitle>\n                    <CardDescription>Employee roles in the organization</CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <ResponsiveContainer width=\"100%\" height={300}>\n                      <PieChart>\n                        <Pie\n                          data={roleChartData}\n                          cx=\"50%\"\n                          cy=\"50%\"\n                          labelLine={false}\n                          label={({ name, percentage }) => `${name} (${percentage}%)`}\n                          outerRadius={80}\n                          fill=\"#8884d8\"\n                          dataKey=\"value\"\n                        >\n                          {roleChartData.map((entry, index) => (\n                            <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                          ))}\n                        </Pie>\n                        <Tooltip />\n                      </PieChart>\n                    </ResponsiveContainer>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Recent Activity Summary */}\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n                {/* Recent Leave Requests */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Recent Leave Requests</CardTitle>\n                    <CardDescription>Latest leave request submissions</CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    {leaveRequests.length === 0 ? (\n                      <div className=\"text-center py-8\">\n                        <Calendar className=\"mx-auto h-8 w-8 text-muted-foreground\" />\n                        <p className=\"mt-2 text-sm text-muted-foreground\">No recent leave requests</p>\n                      </div>\n                    ) : (\n                      <div className=\"space-y-4\">\n                        {leaveRequests.slice(0, 5).map((request) => (\n                          <div key={request.id} className=\"flex items-center justify-between p-3 bg-secondary rounded-lg\">\n                            <div>\n                              <p className=\"text-sm font-medium\">\n                                {request.employee.firstName} {request.employee.lastName}\n                              </p>\n                              <p className=\"text-xs text-muted-foreground\">\n                                {request.leaveType.charAt(0).toUpperCase() + request.leaveType.slice(1)} • {request.daysRequested} days\n                              </p>\n                            </div>\n                            <div className=\"flex items-center space-x-2\">\n                              {getStatusBadge(request.status)}\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n\n                {/* Employee Status Summary */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Employee Status</CardTitle>\n                    <CardDescription>Current employee status overview</CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      {employees.slice(0, 5).map((employee) => (\n                        <div key={employee.id} className=\"flex items-center justify-between p-3 bg-secondary rounded-lg\">\n                          <div>\n                            <p className=\"text-sm font-medium\">\n                              {employee.firstName} {employee.lastName}\n                            </p>\n                            <p className=\"text-xs text-muted-foreground\">\n                              {employee.position} • {employee.department}\n                            </p>\n                          </div>\n                          <div className=\"flex items-center space-x-2\">\n                            {getStatusBadge(employee.isActive ? \"active\" : \"inactive\")}\n                            <Badge variant=\"outline\">{employee.leaveBalance} days</Badge>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":18933},"client/src/pages/admin-settings.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport Sidebar from \"@/components/sidebar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Settings, Shield, Users, Bell, Database, Download } from \"lucide-react\";\n\nexport default function AdminSettings() {\n  const { toast } = useToast();\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n  \n  // System Settings State\n  const [defaultLeaveBalance, setDefaultLeaveBalance] = useState(\"20\");\n  const [workingHours, setWorkingHours] = useState(\"8\");\n  const [timeZone, setTimeZone] = useState(\"UTC\");\n  const [dateFormat, setDateFormat] = useState(\"MM/dd/yyyy\");\n  \n  // Notification Settings State\n  const [emailNotifications, setEmailNotifications] = useState(true);\n  const [leaveRequestNotifications, setLeaveRequestNotifications] = useState(true);\n  const [attendanceAlerts, setAttendanceAlerts] = useState(false);\n  const [weeklyReports, setWeeklyReports] = useState(true);\n  \n  // Security Settings State\n  const [sessionTimeout, setSessionTimeout] = useState(\"24\");\n  const [passwordComplexity, setPasswordComplexity] = useState(\"medium\");\n  const [twoFactorAuth, setTwoFactorAuth] = useState(false);\n  const [auditLogging, setAuditLogging] = useState(true);\n\n  const handleSaveSystemSettings = () => {\n    // In a real app, this would make an API call to save settings\n    toast({\n      title: \"Settings Saved\",\n      description: \"System settings have been updated successfully.\",\n    });\n  };\n\n  const handleSaveNotificationSettings = () => {\n    toast({\n      title: \"Notifications Updated\",\n      description: \"Notification preferences have been saved.\",\n    });\n  };\n\n  const handleSaveSecuritySettings = () => {\n    toast({\n      title: \"Security Settings Updated\",\n      description: \"Security configuration has been saved.\",\n    });\n  };\n\n  const handleExportData = () => {\n    toast({\n      title: \"Export Started\",\n      description: \"Your data export is being prepared. You'll receive an email when it's ready.\",\n    });\n  };\n\n  const handleBackupDatabase = () => {\n    toast({\n      title: \"Backup Initiated\",\n      description: \"Database backup has been started. This may take a few minutes.\",\n    });\n  };\n\n  return (\n    <div className=\"flex h-screen bg-background\">\n      <Sidebar />\n      \n      <div className=\"flex-1 overflow-hidden\">\n        <div className=\"relative z-0 flex-1 overflow-y-auto focus:outline-none\">\n          <div className=\"py-6\">\n            <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n              {/* Header */}\n              <div className=\"mb-8\">\n                <h1 className=\"text-2xl font-bold\">System Settings</h1>\n                <p className=\"text-muted-foreground\">Manage your organization's system configuration and preferences.</p>\n              </div>\n\n              <Tabs defaultValue=\"system\" className=\"space-y-6\">\n                <TabsList className=\"grid w-full grid-cols-4\">\n                  <TabsTrigger value=\"system\" data-testid=\"tab-system\">\n                    <Settings className=\"h-4 w-4 mr-2\" />\n                    System\n                  </TabsTrigger>\n                  <TabsTrigger value=\"notifications\" data-testid=\"tab-notifications\">\n                    <Bell className=\"h-4 w-4 mr-2\" />\n                    Notifications\n                  </TabsTrigger>\n                  <TabsTrigger value=\"security\" data-testid=\"tab-security\">\n                    <Shield className=\"h-4 w-4 mr-2\" />\n                    Security\n                  </TabsTrigger>\n                  <TabsTrigger value=\"data\" data-testid=\"tab-data\">\n                    <Database className=\"h-4 w-4 mr-2\" />\n                    Data\n                  </TabsTrigger>\n                </TabsList>\n\n                {/* System Settings */}\n                <TabsContent value=\"system\" className=\"space-y-6\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>General Settings</CardTitle>\n                      <CardDescription>Configure basic system parameters and defaults</CardDescription>\n                    </CardHeader>\n                    <CardContent className=\"space-y-6\">\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"leave-balance\">Default Leave Balance (Days)</Label>\n                          <Input\n                            id=\"leave-balance\"\n                            type=\"number\"\n                            value={defaultLeaveBalance}\n                            onChange={(e) => setDefaultLeaveBalance(e.target.value)}\n                            min=\"0\"\n                            max=\"365\"\n                            data-testid=\"input-leave-balance\"\n                          />\n                          <p className=\"text-xs text-muted-foreground\">\n                            Annual leave days assigned to new employees\n                          </p>\n                        </div>\n                        \n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"working-hours\">Standard Working Hours</Label>\n                          <Input\n                            id=\"working-hours\"\n                            type=\"number\"\n                            value={workingHours}\n                            onChange={(e) => setWorkingHours(e.target.value)}\n                            min=\"1\"\n                            max=\"24\"\n                            data-testid=\"input-working-hours\"\n                          />\n                          <p className=\"text-xs text-muted-foreground\">\n                            Expected daily working hours\n                          </p>\n                        </div>\n                        \n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"timezone\">Default Time Zone</Label>\n                          <Select value={timeZone} onValueChange={setTimeZone}>\n                            <SelectTrigger data-testid=\"select-timezone\">\n                              <SelectValue placeholder=\"Select timezone\" />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem value=\"UTC\">UTC</SelectItem>\n                              <SelectItem value=\"America/New_York\">Eastern Time</SelectItem>\n                              <SelectItem value=\"America/Chicago\">Central Time</SelectItem>\n                              <SelectItem value=\"America/Denver\">Mountain Time</SelectItem>\n                              <SelectItem value=\"America/Los_Angeles\">Pacific Time</SelectItem>\n                              <SelectItem value=\"Europe/London\">London</SelectItem>\n                              <SelectItem value=\"Europe/Paris\">Paris</SelectItem>\n                              <SelectItem value=\"Asia/Tokyo\">Tokyo</SelectItem>\n                            </SelectContent>\n                          </Select>\n                        </div>\n                        \n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"date-format\">Date Format</Label>\n                          <Select value={dateFormat} onValueChange={setDateFormat}>\n                            <SelectTrigger data-testid=\"select-date-format\">\n                              <SelectValue placeholder=\"Select date format\" />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem value=\"MM/dd/yyyy\">MM/dd/yyyy</SelectItem>\n                              <SelectItem value=\"dd/MM/yyyy\">dd/MM/yyyy</SelectItem>\n                              <SelectItem value=\"yyyy-MM-dd\">yyyy-MM-dd</SelectItem>\n                              <SelectItem value=\"MMM dd, yyyy\">MMM dd, yyyy</SelectItem>\n                            </SelectContent>\n                          </Select>\n                        </div>\n                      </div>\n                      \n                      <Separator />\n                      \n                      <div className=\"flex justify-end\">\n                        <Button onClick={handleSaveSystemSettings} data-testid=\"button-save-system\">\n                          Save System Settings\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n\n                {/* Notification Settings */}\n                <TabsContent value=\"notifications\" className=\"space-y-6\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Notification Preferences</CardTitle>\n                      <CardDescription>Control when and how you receive notifications</CardDescription>\n                    </CardHeader>\n                    <CardContent className=\"space-y-6\">\n                      <div className=\"space-y-4\">\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"space-y-0.5\">\n                            <Label htmlFor=\"email-notifications\">Email Notifications</Label>\n                            <p className=\"text-sm text-muted-foreground\">\n                              Receive general system notifications via email\n                            </p>\n                          </div>\n                          <Switch\n                            id=\"email-notifications\"\n                            checked={emailNotifications}\n                            onCheckedChange={setEmailNotifications}\n                            data-testid=\"switch-email-notifications\"\n                          />\n                        </div>\n                        \n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"space-y-0.5\">\n                            <Label htmlFor=\"leave-notifications\">Leave Request Notifications</Label>\n                            <p className=\"text-sm text-muted-foreground\">\n                              Get notified when employees submit leave requests\n                            </p>\n                          </div>\n                          <Switch\n                            id=\"leave-notifications\"\n                            checked={leaveRequestNotifications}\n                            onCheckedChange={setLeaveRequestNotifications}\n                            data-testid=\"switch-leave-notifications\"\n                          />\n                        </div>\n                        \n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"space-y-0.5\">\n                            <Label htmlFor=\"attendance-alerts\">Attendance Alerts</Label>\n                            <p className=\"text-sm text-muted-foreground\">\n                              Receive alerts for attendance irregularities\n                            </p>\n                          </div>\n                          <Switch\n                            id=\"attendance-alerts\"\n                            checked={attendanceAlerts}\n                            onCheckedChange={setAttendanceAlerts}\n                            data-testid=\"switch-attendance-alerts\"\n                          />\n                        </div>\n                        \n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"space-y-0.5\">\n                            <Label htmlFor=\"weekly-reports\">Weekly Reports</Label>\n                            <p className=\"text-sm text-muted-foreground\">\n                              Receive weekly summary reports via email\n                            </p>\n                          </div>\n                          <Switch\n                            id=\"weekly-reports\"\n                            checked={weeklyReports}\n                            onCheckedChange={setWeeklyReports}\n                            data-testid=\"switch-weekly-reports\"\n                          />\n                        </div>\n                      </div>\n                      \n                      <Separator />\n                      \n                      <div className=\"flex justify-end\">\n                        <Button onClick={handleSaveNotificationSettings} data-testid=\"button-save-notifications\">\n                          Save Notification Settings\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n\n                {/* Security Settings */}\n                <TabsContent value=\"security\" className=\"space-y-6\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Security Configuration</CardTitle>\n                      <CardDescription>Manage security policies and authentication settings</CardDescription>\n                    </CardHeader>\n                    <CardContent className=\"space-y-6\">\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"session-timeout\">Session Timeout (Hours)</Label>\n                          <Select value={sessionTimeout} onValueChange={setSessionTimeout}>\n                            <SelectTrigger data-testid=\"select-session-timeout\">\n                              <SelectValue placeholder=\"Select timeout\" />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem value=\"1\">1 Hour</SelectItem>\n                              <SelectItem value=\"4\">4 Hours</SelectItem>\n                              <SelectItem value=\"8\">8 Hours</SelectItem>\n                              <SelectItem value=\"24\">24 Hours</SelectItem>\n                              <SelectItem value=\"168\">1 Week</SelectItem>\n                            </SelectContent>\n                          </Select>\n                        </div>\n                        \n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"password-complexity\">Password Complexity</Label>\n                          <Select value={passwordComplexity} onValueChange={setPasswordComplexity}>\n                            <SelectTrigger data-testid=\"select-password-complexity\">\n                              <SelectValue placeholder=\"Select complexity\" />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem value=\"low\">Low (6+ characters)</SelectItem>\n                              <SelectItem value=\"medium\">Medium (8+ chars, mixed case)</SelectItem>\n                              <SelectItem value=\"high\">High (12+ chars, symbols, numbers)</SelectItem>\n                            </SelectContent>\n                          </Select>\n                        </div>\n                      </div>\n                      \n                      <div className=\"space-y-4\">\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"space-y-0.5\">\n                            <Label htmlFor=\"two-factor\">Two-Factor Authentication</Label>\n                            <p className=\"text-sm text-muted-foreground\">\n                              Require 2FA for all administrator accounts\n                            </p>\n                          </div>\n                          <Switch\n                            id=\"two-factor\"\n                            checked={twoFactorAuth}\n                            onCheckedChange={setTwoFactorAuth}\n                            data-testid=\"switch-two-factor\"\n                          />\n                        </div>\n                        \n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"space-y-0.5\">\n                            <Label htmlFor=\"audit-logging\">Audit Logging</Label>\n                            <p className=\"text-sm text-muted-foreground\">\n                              Log all administrative actions and changes\n                            </p>\n                          </div>\n                          <Switch\n                            id=\"audit-logging\"\n                            checked={auditLogging}\n                            onCheckedChange={setAuditLogging}\n                            data-testid=\"switch-audit-logging\"\n                          />\n                        </div>\n                      </div>\n                      \n                      <Separator />\n                      \n                      <div className=\"flex justify-end\">\n                        <Button onClick={handleSaveSecuritySettings} data-testid=\"button-save-security\">\n                          Save Security Settings\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n\n                {/* Data Management */}\n                <TabsContent value=\"data\" className=\"space-y-6\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <Card>\n                      <CardHeader>\n                        <CardTitle>Data Export</CardTitle>\n                        <CardDescription>Export your organization's data for backup or analysis</CardDescription>\n                      </CardHeader>\n                      <CardContent className=\"space-y-4\">\n                        <div className=\"space-y-2\">\n                          <p className=\"text-sm\">\n                            Export includes all employee data, attendance records, and leave requests.\n                          </p>\n                          <p className=\"text-xs text-muted-foreground\">\n                            Data will be exported in CSV format and emailed to your admin account.\n                          </p>\n                        </div>\n                        <Button \n                          onClick={handleExportData} \n                          variant=\"outline\" \n                          className=\"w-full\"\n                          data-testid=\"button-export-data\"\n                        >\n                          <Download className=\"h-4 w-4 mr-2\" />\n                          Export Data\n                        </Button>\n                      </CardContent>\n                    </Card>\n                    \n                    <Card>\n                      <CardHeader>\n                        <CardTitle>Database Backup</CardTitle>\n                        <CardDescription>Create a backup of your system database</CardDescription>\n                      </CardHeader>\n                      <CardContent className=\"space-y-4\">\n                        <div className=\"space-y-2\">\n                          <p className=\"text-sm\">\n                            Create a complete backup of your database for disaster recovery.\n                          </p>\n                          <p className=\"text-xs text-muted-foreground\">\n                            Backup will be stored securely and can be restored if needed.\n                          </p>\n                        </div>\n                        <Button \n                          onClick={handleBackupDatabase} \n                          variant=\"outline\" \n                          className=\"w-full\"\n                          data-testid=\"button-backup-database\"\n                        >\n                          <Database className=\"h-4 w-4 mr-2\" />\n                          Create Backup\n                        </Button>\n                      </CardContent>\n                    </Card>\n                  </div>\n                  \n                  <Card>\n                    <CardHeader>\n                      <CardTitle>System Information</CardTitle>\n                      <CardDescription>Current system status and configuration details</CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                        <div className=\"space-y-1\">\n                          <p className=\"text-sm font-medium\">System Version</p>\n                          <p className=\"text-sm text-muted-foreground\">v1.0.0</p>\n                        </div>\n                        <div className=\"space-y-1\">\n                          <p className=\"text-sm font-medium\">Database Status</p>\n                          <p className=\"text-sm text-green-600\">Connected</p>\n                        </div>\n                        <div className=\"space-y-1\">\n                          <p className=\"text-sm font-medium\">Last Backup</p>\n                          <p className=\"text-sm text-muted-foreground\">Never</p>\n                        </div>\n                        <div className=\"space-y-1\">\n                          <p className=\"text-sm font-medium\">Admin User</p>\n                          <p className=\"text-sm text-muted-foreground\">{user?.email}</p>\n                        </div>\n                        <div className=\"space-y-1\">\n                          <p className=\"text-sm font-medium\">Environment</p>\n                          <p className=\"text-sm text-muted-foreground\">Development</p>\n                        </div>\n                        <div className=\"space-y-1\">\n                          <p className=\"text-sm font-medium\">Uptime</p>\n                          <p className=\"text-sm text-muted-foreground\">2h 45m</p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n              </Tabs>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":22581},"client/src/pages/employee-attendance.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { format } from \"date-fns\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { getAuthHeaders } from \"@/lib/auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport Sidebar from \"@/components/sidebar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Clock, LogIn, LogOut, Calendar, CheckCircle2, AlertTriangle } from \"lucide-react\";\nimport type { Attendance } from \"@shared/schema\";\n\nexport default function EmployeeAttendance() {\n  const { toast } = useToast();\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n\n  // Fetch today's attendance\n  const { data: todayAttendance, isLoading } = useQuery<Attendance | null>({\n    queryKey: [\"/api/attendance/my\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/attendance/my\", {\n        headers: getAuthHeaders(),\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch attendance\");\n      return await response.json();\n    },\n  });\n\n  // Check-in mutation\n  const checkInMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", \"/api/attendance/checkin\");\n      return await response.json();\n    },\n    onSuccess: () => {\n      toast({ \n        title: \"Checked In\", \n        description: \"You have successfully checked in for today.\" \n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/attendance/my\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Check-in Failed\",\n        description: error.message || \"Failed to check in\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Check-out mutation\n  const checkOutMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", \"/api/attendance/checkout\");\n      return await response.json();\n    },\n    onSuccess: () => {\n      toast({ \n        title: \"Checked Out\", \n        description: \"You have successfully checked out for today.\" \n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/attendance/my\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Check-out Failed\",\n        description: error.message || \"Failed to check out\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getCurrentTime = () => {\n    return format(new Date(), \"hh:mm a\");\n  };\n\n  const getWorkingHours = () => {\n    if (!todayAttendance?.checkInTime) return \"0h 0m\";\n    \n    const checkIn = new Date(todayAttendance.checkInTime);\n    const checkOut = todayAttendance.checkOutTime \n      ? new Date(todayAttendance.checkOutTime) \n      : new Date();\n    \n    const diffMs = checkOut.getTime() - checkIn.getTime();\n    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n    const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n    \n    return `${diffHours}h ${diffMinutes}m`;\n  };\n\n  const getStatusInfo = () => {\n    if (!todayAttendance) {\n      return {\n        status: \"Not Checked In\",\n        color: \"text-muted-foreground\",\n        icon: AlertTriangle,\n        bgColor: \"bg-yellow-50 border-yellow-200\",\n        canCheckIn: true,\n        canCheckOut: false,\n      };\n    }\n\n    if (!todayAttendance.checkOutTime) {\n      return {\n        status: \"Checked In\",\n        color: \"text-green-600\",\n        icon: CheckCircle2,\n        bgColor: \"bg-green-50 border-green-200\",\n        canCheckIn: false,\n        canCheckOut: true,\n      };\n    }\n\n    return {\n      status: \"Day Complete\",\n      color: \"text-blue-600\",\n      icon: CheckCircle2,\n      bgColor: \"bg-blue-50 border-blue-200\",\n      canCheckIn: false,\n      canCheckOut: false,\n    };\n  };\n\n  const statusInfo = getStatusInfo();\n\n  if (isLoading) {\n    return (\n      <div className=\"flex h-screen bg-background\">\n        <Sidebar />\n        <div className=\"flex-1 flex items-center justify-center\">\n          <div className=\"text-muted-foreground\">Loading attendance...</div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen bg-background\">\n      <Sidebar />\n      \n      <div className=\"flex-1 overflow-hidden\">\n        <div className=\"relative z-0 flex-1 overflow-y-auto focus:outline-none\">\n          <div className=\"py-6\">\n            <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n              {/* Header */}\n              <div className=\"mb-8\">\n                <h1 className=\"text-2xl font-bold\">Attendance</h1>\n                <p className=\"text-muted-foreground\">Track your daily attendance and working hours.</p>\n              </div>\n\n              {/* Current Status Card */}\n              <Card className={`mb-8 ${statusInfo.bgColor}`}>\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-3\">\n                      <statusInfo.icon className={`h-6 w-6 ${statusInfo.color}`} />\n                      <div>\n                        <CardTitle className={statusInfo.color}>{statusInfo.status}</CardTitle>\n                        <CardDescription>\n                          Today, {format(new Date(), \"EEEE, MMMM dd, yyyy\")}\n                        </CardDescription>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"text-2xl font-bold\">\n                        {getCurrentTime()}\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">Current Time</div>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                    <div>\n                      <p className=\"text-sm font-medium text-muted-foreground\">Check In Time</p>\n                      <p className=\"text-lg font-semibold\" data-testid=\"text-checkin-time\">\n                        {todayAttendance?.checkInTime \n                          ? format(new Date(todayAttendance.checkInTime), \"hh:mm a\")\n                          : \"--:--\"}\n                      </p>\n                    </div>\n                    <div>\n                      <p className=\"text-sm font-medium text-muted-foreground\">Check Out Time</p>\n                      <p className=\"text-lg font-semibold\" data-testid=\"text-checkout-time\">\n                        {todayAttendance?.checkOutTime \n                          ? format(new Date(todayAttendance.checkOutTime), \"hh:mm a\")\n                          : \"--:--\"}\n                      </p>\n                    </div>\n                    <div>\n                      <p className=\"text-sm font-medium text-muted-foreground\">Working Hours</p>\n                      <p className=\"text-lg font-semibold\" data-testid=\"text-working-hours\">\n                        {getWorkingHours()}\n                      </p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex space-x-3 mt-6\">\n                    <Button\n                      onClick={() => checkInMutation.mutate()}\n                      disabled={!statusInfo.canCheckIn || checkInMutation.isPending}\n                      className=\"flex-1\"\n                      data-testid=\"button-checkin\"\n                    >\n                      <LogIn className=\"h-4 w-4 mr-2\" />\n                      Check In\n                    </Button>\n                    <Button\n                      onClick={() => checkOutMutation.mutate()}\n                      disabled={!statusInfo.canCheckOut || checkOutMutation.isPending}\n                      variant=\"outline\"\n                      className=\"flex-1\"\n                      data-testid=\"button-checkout\"\n                    >\n                      <LogOut className=\"h-4 w-4 mr-2\" />\n                      Check Out\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Today's Summary */}\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Status</CardTitle>\n                    <Clock className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\" data-testid=\"status-badge\">\n                      <Badge className={statusInfo.color.includes('green') ? 'bg-green-100 text-green-800' : \n                                       statusInfo.color.includes('blue') ? 'bg-blue-100 text-blue-800' :\n                                       'bg-yellow-100 text-yellow-800'}>\n                        {statusInfo.status}\n                      </Badge>\n                    </div>\n                  </CardContent>\n                </Card>\n                \n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Hours Today</CardTitle>\n                    <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\" data-testid=\"hours-today\">\n                      {getWorkingHours()}\n                    </div>\n                    <p className=\"text-xs text-muted-foreground\">\n                      Target: 8h 0m\n                    </p>\n                  </CardContent>\n                </Card>\n                \n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Break Time</CardTitle>\n                    <Clock className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\">0h 0m</div>\n                    <p className=\"text-xs text-muted-foreground\">\n                      No breaks recorded\n                    </p>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Quick Actions */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Quick Actions</CardTitle>\n                  <CardDescription>Common attendance-related actions</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div className=\"p-4 border border-border rounded-lg\">\n                      <h3 className=\"font-semibold mb-2\">Need Help?</h3>\n                      <p className=\"text-sm text-muted-foreground mb-3\">\n                        Contact HR if you're having trouble with attendance tracking or need to report issues.\n                      </p>\n                      <Button variant=\"outline\" size=\"sm\">\n                        Contact HR\n                      </Button>\n                    </div>\n                    \n                    <div className=\"p-4 border border-border rounded-lg\">\n                      <h3 className=\"font-semibold mb-2\">View History</h3>\n                      <p className=\"text-sm text-muted-foreground mb-3\">\n                        Check your attendance history and working hours for previous days.\n                      </p>\n                      <Button variant=\"outline\" size=\"sm\" disabled>\n                        View History\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Attendance Guidelines */}\n              <Card className=\"mt-6\">\n                <CardHeader>\n                  <CardTitle>Attendance Guidelines</CardTitle>\n                  <CardDescription>Important information about attendance policies</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-start space-x-3\">\n                      <CheckCircle2 className=\"h-5 w-5 text-green-600 mt-0.5\" />\n                      <div>\n                        <p className=\"font-medium\">Standard Working Hours</p>\n                        <p className=\"text-sm text-muted-foreground\">8 hours per day, Monday to Friday</p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-start space-x-3\">\n                      <CheckCircle2 className=\"h-5 w-5 text-green-600 mt-0.5\" />\n                      <div>\n                        <p className=\"font-medium\">Check-in Window</p>\n                        <p className=\"text-sm text-muted-foreground\">Please check in within 15 minutes of your start time</p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-start space-x-3\">\n                      <CheckCircle2 className=\"h-5 w-5 text-green-600 mt-0.5\" />\n                      <div>\n                        <p className=\"font-medium\">Late Check-in</p>\n                        <p className=\"text-sm text-muted-foreground\">Late arrivals should be reported to your supervisor</p>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":13836},"client/src/pages/employee-leave-requests.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { format } from \"date-fns\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { getAuthHeaders } from \"@/lib/auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport Sidebar from \"@/components/sidebar\";\nimport LeaveRequestForm from \"@/components/leave-request-form\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Plus, Calendar, Clock, CheckCircle, XCircle, Hourglass } from \"lucide-react\";\nimport type { LeaveRequest } from \"@shared/schema\";\n\nexport default function EmployeeLeaveRequests() {\n  const { toast } = useToast();\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n\n  // Fetch user's leave requests\n  const { data: leaveRequests = [], isLoading } = useQuery<LeaveRequest[]>({\n    queryKey: [\"/api/leave-requests/my\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/leave-requests/my\", {\n        headers: getAuthHeaders(),\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch leave requests\");\n      return await response.json();\n    },\n  });\n\n  // Submit leave request mutation\n  const submitLeaveRequestMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest(\"POST\", \"/api/leave-requests\", data);\n      return await response.json();\n    },\n    onSuccess: () => {\n      toast({ \n        title: \"Success\", \n        description: \"Leave request submitted successfully\" \n      });\n      setIsDialogOpen(false);\n      queryClient.invalidateQueries({ queryKey: [\"/api/leave-requests/my\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to submit leave request\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmitLeaveRequest = (data: any) => {\n    submitLeaveRequestMutation.mutate(data);\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case \"pending\":\n        return (\n          <Badge className=\"bg-yellow-100 text-yellow-800 hover:bg-yellow-100\">\n            <Hourglass className=\"h-3 w-3 mr-1\" />\n            Pending\n          </Badge>\n        );\n      case \"approved\":\n        return (\n          <Badge className=\"bg-green-100 text-green-800 hover:bg-green-100\">\n            <CheckCircle className=\"h-3 w-3 mr-1\" />\n            Approved\n          </Badge>\n        );\n      case \"rejected\":\n        return (\n          <Badge className=\"bg-red-100 text-red-800 hover:bg-red-100\">\n            <XCircle className=\"h-3 w-3 mr-1\" />\n            Rejected\n          </Badge>\n        );\n      default:\n        return <Badge variant=\"secondary\">{status}</Badge>;\n    }\n  };\n\n  const getLeaveTypeBadge = (type: string) => {\n    const colors = {\n      sick: \"bg-red-50 text-red-700 border-red-200\",\n      vacation: \"bg-blue-50 text-blue-700 border-blue-200\",\n      personal: \"bg-purple-50 text-purple-700 border-purple-200\",\n      emergency: \"bg-orange-50 text-orange-700 border-orange-200\",\n    };\n    \n    return (\n      <Badge variant=\"outline\" className={colors[type as keyof typeof colors] || \"bg-gray-50 text-gray-700 border-gray-200\"}>\n        {type.charAt(0).toUpperCase() + type.slice(1)}\n      </Badge>\n    );\n  };\n\n  // Calculate stats\n  const stats = {\n    total: leaveRequests.length,\n    pending: leaveRequests.filter(req => req.status === \"pending\").length,\n    approved: leaveRequests.filter(req => req.status === \"approved\").length,\n    rejected: leaveRequests.filter(req => req.status === \"rejected\").length,\n    balance: user?.leaveBalance || 0,\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex h-screen bg-background\">\n        <Sidebar />\n        <div className=\"flex-1 flex items-center justify-center\">\n          <div className=\"text-muted-foreground\">Loading leave requests...</div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen bg-background\">\n      <Sidebar />\n      \n      <div className=\"flex-1 overflow-hidden\">\n        <div className=\"relative z-0 flex-1 overflow-y-auto focus:outline-none\">\n          <div className=\"py-6\">\n            <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n              {/* Header */}\n              <div className=\"mb-8\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h1 className=\"text-2xl font-bold\">Leave Requests</h1>\n                    <p className=\"text-muted-foreground\">Submit and track your leave requests.</p>\n                  </div>\n                  <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n                    <DialogTrigger asChild>\n                      <Button data-testid=\"button-new-leave-request\">\n                        <Plus className=\"h-4 w-4 mr-2\" />\n                        New Request\n                      </Button>\n                    </DialogTrigger>\n                    <DialogContent className=\"max-w-md\">\n                      <DialogHeader>\n                        <DialogTitle>Submit Leave Request</DialogTitle>\n                      </DialogHeader>\n                      <LeaveRequestForm\n                        onSubmit={handleSubmitLeaveRequest}\n                        onCancel={() => setIsDialogOpen(false)}\n                        isLoading={submitLeaveRequestMutation.isPending}\n                      />\n                    </DialogContent>\n                  </Dialog>\n                </div>\n              </div>\n\n              {/* Stats Cards */}\n              <div className=\"grid grid-cols-1 md:grid-cols-3 lg:grid-cols-5 gap-6 mb-8\">\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Leave Balance</CardTitle>\n                    <Calendar className=\"h-4 w-4 text-green-600\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-green-600\" data-testid=\"stat-leave-balance\">\n                      {stats.balance}\n                    </div>\n                    <p className=\"text-xs text-muted-foreground\">days remaining</p>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Total Requests</CardTitle>\n                    <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\" data-testid=\"stat-total-requests\">\n                      {stats.total}\n                    </div>\n                  </CardContent>\n                </Card>\n                \n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Pending</CardTitle>\n                    <Clock className=\"h-4 w-4 text-yellow-600\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-yellow-600\" data-testid=\"stat-pending-requests\">\n                      {stats.pending}\n                    </div>\n                  </CardContent>\n                </Card>\n                \n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Approved</CardTitle>\n                    <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-green-600\" data-testid=\"stat-approved-requests\">\n                      {stats.approved}\n                    </div>\n                  </CardContent>\n                </Card>\n                \n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Rejected</CardTitle>\n                    <XCircle className=\"h-4 w-4 text-red-600\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-red-600\" data-testid=\"stat-rejected-requests\">\n                      {stats.rejected}\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Leave Requests List */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Your Leave Requests</CardTitle>\n                  <CardDescription>\n                    {leaveRequests.length === 0 \n                      ? \"You haven't submitted any leave requests yet.\" \n                      : `Showing ${leaveRequests.length} leave request${leaveRequests.length !== 1 ? 's' : ''}`}\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  {leaveRequests.length === 0 ? (\n                    <div className=\"text-center py-12\">\n                      <Calendar className=\"mx-auto h-12 w-12 text-muted-foreground\" />\n                      <h3 className=\"mt-2 text-sm font-semibold\">No leave requests</h3>\n                      <p className=\"mt-1 text-sm text-muted-foreground\">\n                        Get started by submitting your first leave request.\n                      </p>\n                      <div className=\"mt-6\">\n                        <Dialog>\n                          <DialogTrigger asChild>\n                            <Button data-testid=\"button-first-leave-request\">\n                              <Plus className=\"h-4 w-4 mr-2\" />\n                              Submit Leave Request\n                            </Button>\n                          </DialogTrigger>\n                          <DialogContent className=\"max-w-md\">\n                            <DialogHeader>\n                              <DialogTitle>Submit Leave Request</DialogTitle>\n                            </DialogHeader>\n                            <LeaveRequestForm\n                              onSubmit={handleSubmitLeaveRequest}\n                              onCancel={() => {}}\n                              isLoading={submitLeaveRequestMutation.isPending}\n                            />\n                          </DialogContent>\n                        </Dialog>\n                      </div>\n                    </div>\n                  ) : (\n                    <div className=\"space-y-4\">\n                      {leaveRequests.map((request) => (\n                        <div key={request.id} className=\"border border-border rounded-lg p-6\" data-testid={`card-request-${request.id}`}>\n                          <div className=\"flex items-start justify-between mb-4\">\n                            <div>\n                              <div className=\"flex items-center space-x-2 mb-2\">\n                                {getLeaveTypeBadge(request.leaveType)}\n                                {getStatusBadge(request.status)}\n                              </div>\n                              <h3 className=\"text-lg font-semibold\">\n                                {request.leaveType.charAt(0).toUpperCase() + request.leaveType.slice(1)} Leave\n                              </h3>\n                              <p className=\"text-sm text-muted-foreground\">\n                                Submitted on {format(new Date(request.createdAt), \"MMM dd, yyyy 'at' hh:mm a\")}\n                              </p>\n                            </div>\n                            <div className=\"text-right\">\n                              <p className=\"text-lg font-semibold\">{request.daysRequested}</p>\n                              <p className=\"text-sm text-muted-foreground\">days</p>\n                            </div>\n                          </div>\n\n                          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n                            <div>\n                              <p className=\"text-sm font-medium text-muted-foreground\">Start Date</p>\n                              <p className=\"text-sm\">{format(new Date(request.startDate), \"EEEE, MMM dd, yyyy\")}</p>\n                            </div>\n                            <div>\n                              <p className=\"text-sm font-medium text-muted-foreground\">End Date</p>\n                              <p className=\"text-sm\">{format(new Date(request.endDate), \"EEEE, MMM dd, yyyy\")}</p>\n                            </div>\n                          </div>\n\n                          {request.reason && (\n                            <div className=\"mb-4\">\n                              <p className=\"text-sm font-medium text-muted-foreground mb-1\">Reason</p>\n                              <p className=\"text-sm bg-secondary p-3 rounded-md\">{request.reason}</p>\n                            </div>\n                          )}\n\n                          {request.status !== \"pending\" && (\n                            <div className=\"pt-4 border-t border-border\">\n                              <div className=\"flex items-start justify-between\">\n                                <div>\n                                  <p className=\"text-sm font-medium text-muted-foreground\">\n                                    {request.status === \"approved\" ? \"Approved\" : \"Rejected\"}\n                                    {request.reviewedAt && ` on ${format(new Date(request.reviewedAt), \"MMM dd, yyyy\")}`}\n                                  </p>\n                                  {request.reviewComments && (\n                                    <p className=\"text-sm mt-1 bg-secondary p-3 rounded-md\">\n                                      {request.reviewComments}\n                                    </p>\n                                  )}\n                                </div>\n                              </div>\n                            </div>\n                          )}\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n\n              {/* Leave Policy Information */}\n              <Card className=\"mt-6\">\n                <CardHeader>\n                  <CardTitle>Leave Policy</CardTitle>\n                  <CardDescription>Important information about leave requests</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-start space-x-3\">\n                      <CheckCircle className=\"h-5 w-5 text-green-600 mt-0.5\" />\n                      <div>\n                        <p className=\"font-medium\">Annual Leave Allocation</p>\n                        <p className=\"text-sm text-muted-foreground\">You have {stats.balance} days remaining for this year</p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-start space-x-3\">\n                      <CheckCircle className=\"h-5 w-5 text-green-600 mt-0.5\" />\n                      <div>\n                        <p className=\"font-medium\">Advance Notice</p>\n                        <p className=\"text-sm text-muted-foreground\">Submit requests at least 2 weeks in advance for planned leave</p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-start space-x-3\">\n                      <CheckCircle className=\"h-5 w-5 text-green-600 mt-0.5\" />\n                      <div>\n                        <p className=\"font-medium\">Approval Process</p>\n                        <p className=\"text-sm text-muted-foreground\">Requests are reviewed by your supervisor and HR team</p>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":16537},"client/src/pages/employee-profile.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { format } from \"date-fns\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { getAuthHeaders } from \"@/lib/auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport Sidebar from \"@/components/sidebar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { User, Mail, Building, Calendar, Shield, Edit, Save, X } from \"lucide-react\";\nimport type { Employee } from \"@shared/schema\";\n\nexport default function EmployeeProfile() {\n  const { toast } = useToast();\n  const { user, updateUser } = useAuth();\n  const queryClient = useQueryClient();\n  const [isEditing, setIsEditing] = useState(false);\n  const [formData, setFormData] = useState({\n    firstName: user?.firstName || \"\",\n    lastName: user?.lastName || \"\",\n    email: user?.email || \"\",\n    position: user?.position || \"\",\n    department: user?.department || \"\",\n  });\n\n  // Fetch full user profile\n  const { data: profile, isLoading } = useQuery<Employee>({\n    queryKey: [\"/api/auth/me\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/auth/me\", {\n        headers: getAuthHeaders(),\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch profile\");\n      return await response.json();\n    },\n    initialData: user,\n  });\n\n  // Update profile mutation\n  const updateProfileMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest(\"PUT\", `/api/employees/${profile?.id}`, data);\n      return await response.json();\n    },\n    onSuccess: (updatedProfile) => {\n      toast({ \n        title: \"Success\", \n        description: \"Profile updated successfully\" \n      });\n      setIsEditing(false);\n      updateUser(updatedProfile);\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update profile\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSave = () => {\n    updateProfileMutation.mutate(formData);\n  };\n\n  const handleCancel = () => {\n    setFormData({\n      firstName: profile?.firstName || \"\",\n      lastName: profile?.lastName || \"\",\n      email: profile?.email || \"\",\n      position: profile?.position || \"\",\n      department: profile?.department || \"\",\n    });\n    setIsEditing(false);\n  };\n\n  const getInitials = (firstName: string, lastName: string) => {\n    return `${firstName.charAt(0)}${lastName.charAt(0)}`.toUpperCase();\n  };\n\n  const getRoleBadge = (role: string) => {\n    return role === \"admin\" ? (\n      <Badge className=\"bg-blue-100 text-blue-800 hover:bg-blue-100\">\n        <Shield className=\"h-3 w-3 mr-1\" />\n        Administrator\n      </Badge>\n    ) : (\n      <Badge variant=\"secondary\">\n        <User className=\"h-3 w-3 mr-1\" />\n        Employee\n      </Badge>\n    );\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex h-screen bg-background\">\n        <Sidebar />\n        <div className=\"flex-1 flex items-center justify-center\">\n          <div className=\"text-muted-foreground\">Loading profile...</div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!profile) {\n    return (\n      <div className=\"flex h-screen bg-background\">\n        <Sidebar />\n        <div className=\"flex-1 flex items-center justify-center\">\n          <div className=\"text-muted-foreground\">Profile not found</div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen bg-background\">\n      <Sidebar />\n      \n      <div className=\"flex-1 overflow-hidden\">\n        <div className=\"relative z-0 flex-1 overflow-y-auto focus:outline-none\">\n          <div className=\"py-6\">\n            <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n              {/* Header */}\n              <div className=\"mb-8\">\n                <h1 className=\"text-2xl font-bold\">My Profile</h1>\n                <p className=\"text-muted-foreground\">Manage your personal information and account settings.</p>\n              </div>\n\n              {/* Profile Header */}\n              <Card className=\"mb-8\">\n                <CardContent className=\"pt-6\">\n                  <div className=\"flex items-center space-x-6\">\n                    <div className=\"h-20 w-20 bg-primary/10 rounded-full flex items-center justify-center\">\n                      <span className=\"text-2xl font-medium text-primary\">\n                        {getInitials(profile.firstName, profile.lastName)}\n                      </span>\n                    </div>\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <h2 className=\"text-2xl font-bold\" data-testid=\"profile-name\">\n                            {profile.firstName} {profile.lastName}\n                          </h2>\n                          <p className=\"text-muted-foreground\" data-testid=\"profile-position\">\n                            {profile.position} • {profile.department}\n                          </p>\n                          <div className=\"flex items-center space-x-2 mt-2\">\n                            {getRoleBadge(profile.role)}\n                            <Badge className=\"bg-green-100 text-green-800 hover:bg-green-100\">\n                              Active\n                            </Badge>\n                          </div>\n                        </div>\n                        <Button\n                          onClick={() => setIsEditing(!isEditing)}\n                          variant={isEditing ? \"outline\" : \"default\"}\n                          data-testid=\"button-edit-profile\"\n                        >\n                          {isEditing ? (\n                            <>\n                              <X className=\"h-4 w-4 mr-2\" />\n                              Cancel\n                            </>\n                          ) : (\n                            <>\n                              <Edit className=\"h-4 w-4 mr-2\" />\n                              Edit Profile\n                            </>\n                          )}\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Tabs defaultValue=\"personal\" className=\"space-y-6\">\n                <TabsList className=\"grid w-full grid-cols-3\">\n                  <TabsTrigger value=\"personal\" data-testid=\"tab-personal\">Personal Info</TabsTrigger>\n                  <TabsTrigger value=\"employment\" data-testid=\"tab-employment\">Employment</TabsTrigger>\n                  <TabsTrigger value=\"account\" data-testid=\"tab-account\">Account</TabsTrigger>\n                </TabsList>\n\n                {/* Personal Information */}\n                <TabsContent value=\"personal\" className=\"space-y-6\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Personal Information</CardTitle>\n                      <CardDescription>Your basic personal details</CardDescription>\n                    </CardHeader>\n                    <CardContent className=\"space-y-6\">\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"firstName\">First Name</Label>\n                          {isEditing ? (\n                            <Input\n                              id=\"firstName\"\n                              value={formData.firstName}\n                              onChange={(e) => setFormData({ ...formData, firstName: e.target.value })}\n                              data-testid=\"input-first-name\"\n                            />\n                          ) : (\n                            <div className=\"px-3 py-2 bg-secondary rounded-md\" data-testid=\"display-first-name\">\n                              {profile.firstName}\n                            </div>\n                          )}\n                        </div>\n                        \n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"lastName\">Last Name</Label>\n                          {isEditing ? (\n                            <Input\n                              id=\"lastName\"\n                              value={formData.lastName}\n                              onChange={(e) => setFormData({ ...formData, lastName: e.target.value })}\n                              data-testid=\"input-last-name\"\n                            />\n                          ) : (\n                            <div className=\"px-3 py-2 bg-secondary rounded-md\" data-testid=\"display-last-name\">\n                              {profile.lastName}\n                            </div>\n                          )}\n                        </div>\n                        \n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"email\">Email Address</Label>\n                          {isEditing ? (\n                            <Input\n                              id=\"email\"\n                              type=\"email\"\n                              value={formData.email}\n                              onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n                              data-testid=\"input-email\"\n                            />\n                          ) : (\n                            <div className=\"px-3 py-2 bg-secondary rounded-md flex items-center\" data-testid=\"display-email\">\n                              <Mail className=\"h-4 w-4 mr-2 text-muted-foreground\" />\n                              {profile.email}\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                      \n                      {isEditing && (\n                        <>\n                          <Separator />\n                          <div className=\"flex justify-end space-x-3\">\n                            <Button \n                              variant=\"outline\" \n                              onClick={handleCancel}\n                              data-testid=\"button-cancel-edit\"\n                            >\n                              Cancel\n                            </Button>\n                            <Button \n                              onClick={handleSave}\n                              disabled={updateProfileMutation.isPending}\n                              data-testid=\"button-save-profile\"\n                            >\n                              <Save className=\"h-4 w-4 mr-2\" />\n                              Save Changes\n                            </Button>\n                          </div>\n                        </>\n                      )}\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n\n                {/* Employment Information */}\n                <TabsContent value=\"employment\" className=\"space-y-6\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Employment Details</CardTitle>\n                      <CardDescription>Your role and department information</CardDescription>\n                    </CardHeader>\n                    <CardContent className=\"space-y-6\">\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"position\">Position</Label>\n                          {isEditing ? (\n                            <Input\n                              id=\"position\"\n                              value={formData.position}\n                              onChange={(e) => setFormData({ ...formData, position: e.target.value })}\n                              data-testid=\"input-position\"\n                            />\n                          ) : (\n                            <div className=\"px-3 py-2 bg-secondary rounded-md\" data-testid=\"display-position\">\n                              {profile.position}\n                            </div>\n                          )}\n                        </div>\n                        \n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"department\">Department</Label>\n                          {isEditing ? (\n                            <Input\n                              id=\"department\"\n                              value={formData.department}\n                              onChange={(e) => setFormData({ ...formData, department: e.target.value })}\n                              data-testid=\"input-department\"\n                            />\n                          ) : (\n                            <div className=\"px-3 py-2 bg-secondary rounded-md flex items-center\" data-testid=\"display-department\">\n                              <Building className=\"h-4 w-4 mr-2 text-muted-foreground\" />\n                              {profile.department}\n                            </div>\n                          )}\n                        </div>\n                        \n                        <div className=\"space-y-2\">\n                          <Label>Employee Role</Label>\n                          <div className=\"px-3 py-2 bg-secondary rounded-md\">\n                            {getRoleBadge(profile.role)}\n                          </div>\n                        </div>\n                        \n                        <div className=\"space-y-2\">\n                          <Label>Leave Balance</Label>\n                          <div className=\"px-3 py-2 bg-secondary rounded-md\" data-testid=\"display-leave-balance\">\n                            {profile.leaveBalance} days remaining\n                          </div>\n                        </div>\n                        \n                        <div className=\"space-y-2\">\n                          <Label>Join Date</Label>\n                          <div className=\"px-3 py-2 bg-secondary rounded-md flex items-center\" data-testid=\"display-join-date\">\n                            <Calendar className=\"h-4 w-4 mr-2 text-muted-foreground\" />\n                            {format(new Date(profile.createdAt), \"MMMM dd, yyyy\")}\n                          </div>\n                        </div>\n                      </div>\n                      \n                      {isEditing && (\n                        <>\n                          <Separator />\n                          <div className=\"flex justify-end space-x-3\">\n                            <Button \n                              variant=\"outline\" \n                              onClick={handleCancel}\n                              data-testid=\"button-cancel-employment\"\n                            >\n                              Cancel\n                            </Button>\n                            <Button \n                              onClick={handleSave}\n                              disabled={updateProfileMutation.isPending}\n                              data-testid=\"button-save-employment\"\n                            >\n                              <Save className=\"h-4 w-4 mr-2\" />\n                              Save Changes\n                            </Button>\n                          </div>\n                        </>\n                      )}\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n\n                {/* Account Settings */}\n                <TabsContent value=\"account\" className=\"space-y-6\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Account Settings</CardTitle>\n                      <CardDescription>Manage your account preferences and security</CardDescription>\n                    </CardHeader>\n                    <CardContent className=\"space-y-6\">\n                      <div className=\"space-y-4\">\n                        <div>\n                          <Label className=\"text-base font-medium\">Account Status</Label>\n                          <div className=\"mt-1\">\n                            <Badge className=\"bg-green-100 text-green-800 hover:bg-green-100\">\n                              Active Account\n                            </Badge>\n                          </div>\n                          <p className=\"text-sm text-muted-foreground mt-1\">\n                            Your account is active and in good standing\n                          </p>\n                        </div>\n                        \n                        <Separator />\n                        \n                        <div>\n                          <Label className=\"text-base font-medium\">Password</Label>\n                          <p className=\"text-sm text-muted-foreground mt-1\">\n                            Last updated: Never\n                          </p>\n                          <Button variant=\"outline\" size=\"sm\" className=\"mt-2\" disabled>\n                            Change Password\n                          </Button>\n                        </div>\n                        \n                        <Separator />\n                        \n                        <div>\n                          <Label className=\"text-base font-medium\">Data Export</Label>\n                          <p className=\"text-sm text-muted-foreground mt-1\">\n                            Download a copy of your personal data\n                          </p>\n                          <Button variant=\"outline\" size=\"sm\" className=\"mt-2\" disabled>\n                            Request Data Export\n                          </Button>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n              </Tabs>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":18303}},"version":1}